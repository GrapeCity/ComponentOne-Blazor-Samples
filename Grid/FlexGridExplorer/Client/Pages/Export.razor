@page "/export"
@inject IJSRuntime JsRuntime
@using Resources
@using System.IO
@using System.Collections.ObjectModel;
@using C1.Blazor.Grid
@using C1.Blazor.Input

<h1>@AppResources.ExportTitle</h1>
<p>@AppResources.ExportDescription</p>

<p style="display:flex">
    <C1TextBox @bind-Text="@fileName" Style="@("width:170px;border-width:1px 0 1px 1px;border-radius:4px 0 0 4px;")" />
    <C1ComboBox ItemsSource="fileTypes" @bind-SelectedItem="fileType" Style="@("width:80px;border-radius: 0 4px 4px 0;")" />
    <button class="btn btn-primary" @onclick="OnSave" style="margin-left: 8px;">@AppResources.Save</button>
</p>

<FlexGrid @ref="grid"
          ItemsSource="@customers"
          HeadersVisibility="GridHeadersVisibility.All"
          GridLinesVisibility="GridLinesVisibility.Vertical"
          ColumnHeaderGridLinesVisibility="GridLinesVisibility.All"
          RowHeaderGridLinesVisibility="GridLinesVisibility.All"
          TopLeftHeaderGridLinesVisibility="GridLinesVisibility.All"
          GridLinesColor="@("#FF2B2B2B")"
          ColumnHeaderGridLinesColor="@("#FF222222")"
          RowHeaderGridLinesColor="@("#FF222222")"
          TopLeftHeaderGridLinesColor="@("#FF222222")"
          Style="@("background-color: #777777;color: #E2E2E2;border: 1px solid #222222;max-height:50vh")"
          ColumnHeaderStyle="@("background-image: linear-gradient(180deg,#A5A5A5 0%,#898989 48%,#777777 52%,#6F6F6F 100%);color: #E2E2E2;font-weight:bold;")"
          RowHeaderStyle="@("background-color: #6F6F6F;color: #E2E2E2;")"
          RowStyle="@("background-color: #333333;color: #E2E2E2;")"
          SelectionStyle="@("background-color: #8B8B8B;")"
          CursorStyle="@("background-color: #505050;")"
          TopLeftHeaderStyle="@("background-image: linear-gradient(180deg,#A5A5A5 0%,#898989 48%,#777777 52%,#6F6F6F 100%);")"/>

@code {
    FlexGrid grid;
    ObservableCollection<Customer> customers;
    string[] fileTypes = { "CSV", "Text", "HTML" };
    string fileName = "ExportedGrid";
    string fileType = "HTML";

    protected override void OnInitialized()
    {
        customers = Customer.GetCustomerList(100);
    }

    async void OnSave()
    {
        var fileContent = "";
        using (var stream = new MemoryStream())
        {
            switch (fileType)
            {
                case "CSV":
                    grid.Save(stream, GridFileFormat.Csv, System.Text.Encoding.UTF8, GridSaveOptions.SaveHeaders);
                    break;
                case "Text":
                    grid.Save(stream, GridFileFormat.Text, System.Text.Encoding.UTF8, GridSaveOptions.SaveHeaders);
                    break;
                case "HTML":
                    grid.Save(stream, GridFileFormat.Html, System.Text.Encoding.UTF8, GridSaveOptions.SaveHeaders);
                    break;
            }
            fileContent = System.Text.UTF8Encoding.UTF8.GetString(stream.GetBuffer());
        }

        await JsRuntime.InvokeVoidAsync("openSaveFile", fileName, fileType, fileContent);
    }
}
