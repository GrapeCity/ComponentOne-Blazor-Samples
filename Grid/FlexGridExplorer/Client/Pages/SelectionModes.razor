@page "/selectionmodes"
@using Resources
@using System.Collections.ObjectModel;
@using C1.Blazor.Grid
@using C1.Blazor.Input

<h1>@AppResources.SelectionModesTitle</h1>
<p>@AppResources.SelectionModesDescription</p>

<p>
    @AppResources.SelectionModesTitle <C1ComboBox ItemsSource="selectionModes" @bind-SelectedItem="selectionMode" Class="filled-drop-down" />
    @AppResources.AllowResizing <C1ComboBox ItemsSource="allowResizingModes" @bind-SelectedItem="allowResizing" Class="filled-drop-down" />
</p>

@selectedCells

<FlexGrid ItemsSource="@customers" StyleKind="@GridStyle.Classic" SelectionChanged="OnSelectionChanged" SelectionMode="selectionMode" AllowResizing="allowResizing" Style="@("max-height:50vh")" />

@code {
    ObservableCollection<Customer> customers;
    string selectedCells;
    GridSelectionMode selectionMode = GridSelectionMode.CellRange;
    GridSelectionMode[] selectionModes = new GridSelectionMode[] { GridSelectionMode.None, GridSelectionMode.Cell, GridSelectionMode.CellRange, GridSelectionMode.Row, GridSelectionMode.RowRange, GridSelectionMode.Column, GridSelectionMode.ColumnRange };
    GridAllowResizing allowResizing = GridAllowResizing.Columns;
    GridAllowResizing[] allowResizingModes = new GridAllowResizing[] { GridAllowResizing.None, GridAllowResizing.Columns, GridAllowResizing.Rows, GridAllowResizing.Both, };

    protected override void OnInitialized()
    {
        customers = Customer.GetCustomerList(100);
    }

    private void OnSelectionChanged(object sender, GridCellRangeEventArgs e)
    {
        if (e.CellRange != null && e.CellRange.Row != -1)
        {
            int rowsSelected = Math.Abs(e.CellRange.Row2 - e.CellRange.Row) + 1;
            int colsSelected = Math.Abs(e.CellRange.Column2 - e.CellRange.Column) + 1;

            selectedCells = (rowsSelected * colsSelected).ToString() + " " + AppResources.CellsSelectedText;
            StateHasChanged();
        }
    }

}
