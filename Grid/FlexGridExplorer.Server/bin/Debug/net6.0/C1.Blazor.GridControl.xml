<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Blazor.GridControl</name>
    </assembly>
    <members>
        <member name="T:C1.Blazor.Grid.CancelEventArgs">
            <summary>
            Event data with a <see cref="P:C1.Blazor.Grid.CancelEventArgs.Cancel"/> property that can be used to cancel the event.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.CancelEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.CancelEventArgs"/> class.
            </summary>
            <param name="cancellable">if set to <c>true</c> the event is cancellable.</param>
        </member>
        <member name="P:C1.Blazor.Grid.CancelEventArgs.Cancellable">
            <summary>
            Gets a value indicating whether the associated event is cancellable.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.CancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the associated event should be canceled.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlEditEventArgs">
            <summary>
            Event data for editing events.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlEditEventArgs.#ctor(System.Boolean,C1.Blazor.Grid.GridControlRange,Microsoft.AspNetCore.Components.ComponentBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlEditEventArgs"/> class.
            </summary>
            <param name="cancellable">if set to <c>true</c> the vent is cancelable.</param>
            <param name="range">The range.</param>
            <param name="editor">The edited value.</param>
            <param name="cancelEdits">Gets a value indicating whether the edit was cancelled.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlEditEventArgs.CancelEdits">
            <summary>
            Gets a value that determines whether the editing action was canceled.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlEditEventArgs.Editor">
            <summary>
            Gets the editor.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlRangeEventArgs">
            <summary>
            Event data for events associated with a range of cells.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlRangeEventArgs.#ctor(System.Boolean,C1.Blazor.Grid.GridControlRange)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> class.
            </summary>
            <param name="cancellable">if set to <c>true</c> the event is cancelable.</param>
            <param name="range">The range.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlRangeEventArgs.CellRange">
            <summary>
            Gets the cell range.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlInputEventArgs">
            <summary>
            Event data for input events associated with a range of cells.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlInputEventArgs.#ctor(System.Boolean,C1.Blazor.Grid.GridControlRange,C1.Blazor.Core.C1TappedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlInputEventArgs"/> class.
            </summary>
            <param name="cancelable">if set to <c>true</c> the event is cancelable.</param>
            <param name="range">The range.</param>
            <param name="e">The tapped events.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlInputEventArgs.Event">
            <summary>
            Gets the arguments of the underlying input event that raised this event.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.C1GridControl">
            <summary>
            Control used to display, select and edit tabular information.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.Adapter">
            <summary>
            Gets or sets the factory of cells.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.IsVirtualizationEnabled">
            <summary>
            Gets or sets whether the ui will be virtualized. Default <c>true</c>.
            </summary>
            <remarks>
            To improve loading performance and network bandwidth usage, the cells are rendered as the user scrolls the controls. 
            If the number of cells is small it could be convenient to disable virtualization to improve scrolling speed.
            </remarks>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._selectionMode">
            <summary>
            Gets or sets how the cells or rows are selected.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._mouseOverMode">
            <summary>
            Gets or sets how the mouse over mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._allowResizing">
            <summary>
            Gets or sets a value that indicates whether users are allowed to resize rows and columns.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._allowDragging">
            <summary>
            Gets or sets a value that indicates whether users are allowed to move rows and columns to new positions.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._frozenRows">
            <summary>
            Gets or sets the number of frozen rows.
            </summary>
            <remarks>Frozen rows do not scroll, but the cells they contain may be selected and edited.</remarks>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._frozenColumns">
            <summary>
            Gets or sets the number of frozen columns.
            </summary>
            <remarks>Frozen columns do not scroll, but the cells they contain may be selected and edited.</remarks>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._showMarquee">
            <summary>
            Gets or sets a value that indicates whether the grid shows an Excel-style
            marquee around the current selection.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._keyActionTab">
            <summary>
            Gets or sets the action to perform when the Tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._keyActionEnter">
            <summary>
            Gets or sets the action to perform when the Enter key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._zoomMode">
            <summary>
            Gets or sets the zoom mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._verticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._horizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._gridLinesVisibility">
            <summary>
            Gets or sets a value that indicates which grid lines separating inner cells are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._gridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the lines between cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._frozenLinesBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the lines between frozen
            and scrollable areas of the grid.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._gridLinesWidth">
            <summary>
            Gets or sets the width of the lines between cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the background of selected cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._selectionAdornerBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> of the selection adorner.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._selectionAdornerBorderBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> of the selection adorner border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._editorBackground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the background of 
            cells in edit mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._editorForeground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the foreground of 
            cells in edit mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._editorStyle">
            <summary>
            Gets or sets the style applied to the editor.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._selectionAdornerStyle">
            <summary>
            Gets or sets the style applied to the selection adorners.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._cellStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style"/> of the normal cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._selectionStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style"/> of the selected cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl._cursorStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style"/> of the cursor cell.
            </summary>
        </member>
        <member name="E:C1.Blazor.Grid.C1GridControl.ScrollPositionChanged">
            <summary>
            Occurs when scroll position changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnBeginningEdit(C1.Blazor.Grid.GridControlEditEventArgs)">
            <summary>
            Raises the <see cref="E:BeginningEdit" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.Blazor.Grid.GridControlEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnPrepareCellForEdit(C1.Blazor.Grid.GridControlEditEventArgs)">
            <summary>
            Raises the <see cref="E:PrepareCellForEdit" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.Blazor.Grid.GridControlEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCellEditEnding(C1.Blazor.Grid.GridControlEditEventArgs)">
            <summary>
            Raises the <see cref="E:CellEditEnding" /> event.
            </summary>
            <param name="e">The <see cref="T:C1.Blazor.Grid.GridControlEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCellEditEnded(C1.Blazor.Grid.GridControlEditEventArgs)">
            <summary>
            Called when the edit of a cell ended.
            </summary>
            <param name="e">The <see cref="T:C1.Blazor.Grid.GridControlEditEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnResizingColumn(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called before a column is resized.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnResizingRow(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called before a row is resized.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnResizedColumn(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called after a column is resized.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnResizedRow(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called after a row is resized.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnSelectionChanging(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called before the selection changed.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnSelectionChanged(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called after the selection changed.
            </summary>
            <param name="e"><see cref="T:C1.Blazor.Grid.GridControlRangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnScrollPositionChanged(System.EventArgs)">
            <summary>
            Called when the scroll position changed.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ViewRange">
            <summary>
            Gets a <see cref="T:C1.Blazor.Grid.GridControlRange"/> value that indicates the range of cells
            currently visible on the grid.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ScrollPosition">
            <summary>
            Gets or sets the scroll position.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Changes the scroll and zoom of the grid to the specified part of the viewport.
            </summary>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.ChangeViewAsync(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Changes the scroll and zoom of the grid to the specified part of the viewport.
            </summary>
            <param name="horizontalOffset">The horizontal offset.</param>
            <param name="verticalOffset">The vertical offset.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.ScrollAPage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Scroll vertically up/down a page.
            </summary>
            <param name="oldRow">Global row index of old location</param>
            <param name="newRow">Global row index of new location</param>
            <param name="disableAnimation"></param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.ScrollIntoView(C1.Blazor.Grid.GridControlRange,System.Double,System.Boolean)">
            <summary>
            Scrolls the grid to bring a specified range into view.
            </summary>
            <param name="range">The range to scroll into view.</param>
            <param name="padding">The distance in pixels between the range and the viewport border.</param>
            <param name="disableAnimation">if set to <c>true</c> disable animations.</param>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.Selection">
            <summary>
            Gets or sets the current selection.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.SelectAll">
            <summary>
            Selects all the cells.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.GetSelectedState(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Gets a <see cref="T:C1.Blazor.Grid.GridSelectedState"/> value that indicates the selected
            state of the cells in a specified range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.Select(C1.Blazor.Grid.GridControlRange,System.Boolean,System.Boolean)">
            <summary>
            Selects a given cell and optionally scrolls it into view.
            </summary>
            <param name="range"><see cref="T:C1.Blazor.Grid.GridControlRange"/> to select.</param>
            <param name="scrollIntoView">Whether to scroll the new selection into view.</param>
            <param name="hideSelectionAdorners">Whether the selection adorners are hidden.</param>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ActualCellStyle">
            <summary>
            Gets the actual style that will be applied to cells.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ActualSelectionStyle">
            <summary>
            Gets the actual style that will be applied to cells when they are selected.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ActualCursorStyle">
            <summary>
            Gets the actual style that will be applied to the cell when the cursor is in it.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.GetCellStyle">
            <summary>
            Gets the style that is applied to the cells.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.GetSelectionStyle">
            <summary>
            Gets the style that is applied to the cells when they are selected.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.GetCursorStyle">
            <summary>
            Gets the style that is applied to the cell when the cursor is in it.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.InvalidateCellStyle">
            <summary>
            Flags the <see cref="P:C1.Blazor.Grid.C1GridControl.ActualCellStyle"/> to be created again.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.InvalidateSelectionStyle">
            <summary>
            Flags the <see cref="P:C1.Blazor.Grid.C1GridControl.ActualSelectionStyle"/> to be created again.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.InvalidateCursorStyle">
            <summary>
            Flags the <see cref="P:C1.Blazor.Grid.C1GridControl.ActualCursorStyle"/> to be created again.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.CursorRange">
            <summary>
            Gets the <see cref="T:C1.Blazor.Grid.GridControlRange"/> that corresponds to the cursor cell.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.SetCursor(System.Int32,System.Int32)">
            <summary>
            Sets the cursor of the grid to the specified row and column.
            </summary>
            <param name="row">The row.</param>
            <param name="column">The column.</param>
            <returns><c>true</c> if the operation succeeded</returns>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCursorChanging(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called before the cursor changed.
            </summary>
            <param name="e">Event data containing information about the cursor change.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCursorChanged(C1.Blazor.Grid.GridControlRangeEventArgs)">
            <summary>
            Called after the cursor changed.
            </summary>
            <param name="e">Event data containing information about the cursor change.</param>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ActiveEditor">
            <summary>
            Gets the cell editor that is currently active.
            </summary>
            <remarks>
            <para>The most common use for this property is to determine whether the
            grid is currently in edit mode. If the grid is not in edit mode, this 
            property returns null.</para>
            </remarks>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.EditorRange">
            <summary>
            Gets the <see cref="T:C1.Blazor.Grid.GridControlRange"/> that corresponds to the cell currently being edited.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.FullEdit">
            <summary>
            Gets a value indicating whether the grid is in full edit mode.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.StartEditing(C1.Blazor.Grid.GridControlRange,System.Boolean,System.Boolean)">
            <summary>
            Starts editing a specific cell.
            </summary>
            <param name="range">The range to start editing.</param>
            <param name="fullEdit">Whether to stay in edit mode when the user presses the cursor keys.</param>
            <param name="focus">Whether to set the focus and select the text in the editor.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.FinishEditing(System.Boolean)">
            <summary>
            Commits or cancels any pending edits and exits edit mode.
            </summary>
            <param name="cancelEdits">if set to <c>true</c> it will cancel the edited value.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCellTapped(C1.Blazor.Grid.GridControlInputEventArgs)">
            <summary>
            Called when a cell is tapped.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCellDoubleTapped(C1.Blazor.Grid.GridControlInputEventArgs)">
            <summary>
            Called when a cell is double tapped.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnCellLongPressed(C1.Blazor.Grid.GridControlInputEventArgs)">
            <summary>
            Called when a cell is being held.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.ExpandToMergedRanges(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Expands the specified range so the range doesn't clip merged ranges.
            </summary>
            <param name="range">The original range.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnIsReadOnlyChanged">
            <summary>
            Called when the property <see cref="!:IsReadOnly"/> changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.LoadDesignTimeData">
            <summary>
            Loads dummy design time content visible in Storyboard and Android designer
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.C1GridControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Grid.C1GridControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.SelectionModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.SelectionMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.SelectionMode">
            <summary>
            Gets or sets how the cells or rows are selected.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.MouseOverModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.MouseOverMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.MouseOverMode">
            <summary>
            Gets or sets how the mouse over mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.AllowResizingProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.AllowResizing"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.AllowResizing">
            <summary>
            Gets or sets a value that indicates whether users are allowed to resize rows and columns.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.AllowDraggingProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.AllowDragging"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.AllowDragging">
            <summary>
            Gets or sets a value that indicates whether users are allowed to move rows and columns to new positions.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.FrozenRowsProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.FrozenRows"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.FrozenRows">
            <summary>
            Gets or sets the number of frozen rows.
            </summary>
            <remarks>Frozen rows do not scroll, but the cells they contain may be selected and edited.</remarks>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.FrozenColumnsProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.FrozenColumns"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.FrozenColumns">
            <summary>
            Gets or sets the number of frozen columns.
            </summary>
            <remarks>Frozen columns do not scroll, but the cells they contain may be selected and edited.</remarks>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.ShowMarqueeProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.ShowMarquee"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ShowMarquee">
            <summary>
            Gets or sets a value that indicates whether the grid shows an Excel-style
            marquee around the current selection.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.KeyActionTabProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.KeyActionTab"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.KeyActionTab">
            <summary>
            Gets or sets the action to perform when the Tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.KeyActionEnterProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.KeyActionEnter"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.KeyActionEnter">
            <summary>
            Gets or sets the action to perform when the Enter key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.ZoomMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.ZoomMode">
            <summary>
            Gets or sets the zoom mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.VerticalScrollBarVisibility">
            <summary>
            Gets or sets the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.GridLinesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.GridLinesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.GridLinesVisibility">
            <summary>
            Gets or sets a value that indicates which grid lines separating inner cells are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.GridLinesBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.GridLinesBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.GridLinesBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the lines between cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.FrozenLinesBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.FrozenLinesBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.FrozenLinesBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the lines between frozen
            and scrollable areas of the grid.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.GridLinesWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.GridLinesWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.GridLinesWidth">
            <summary>
            Gets or sets the width of the lines between cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the background of selected cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.SelectionAdornerBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> of the selection adorner.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.SelectionAdornerBorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerBorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerBorderBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> of the selection adorner border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.EditorBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.EditorBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.EditorBackground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the background of 
            cells in edit mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.EditorForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.EditorForeground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.EditorForeground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the foreground of 
            cells in edit mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.EditorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.EditorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.EditorStyle">
            <summary>
            Gets or sets the style applied to the editor.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.SelectionAdornerStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.SelectionAdornerStyle">
            <summary>
            Gets or sets the style applied to the selection adorners.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.CellStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.CellStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.CellStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style" /> of the normal cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.SelectionStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.SelectionStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.SelectionStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style" /> of the selected cells.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.C1GridControl.CursorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.C1GridControl.CursorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.C1GridControl.CursorStyle">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Style" /> of the cursor cell.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridSelectionMode">
            <summary>
            Specifies constants that define the selection behavior.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.None">
            <summary>
            Selection is not available.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.Cell">
            <summary>
            Selection corresponds to a single cell.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.CellRange">
            <summary>
            Selection corresponds to a cell range.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.Row">
            <summary>
            Selection corresponds to a single row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.RowRange">
            <summary>
            Selection corresponds to a set of contiguous rows.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.Column">
            <summary>
            Selection corresponds to a single column.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectionMode.ColumnRange">
            <summary>
            Selection corresponds to a set of contiguous columns.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridSelectedState">
            <summary>
            Specifies the selected state of a cell.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectedState.None">
            <summary>
            Cell is not selected.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridSelectedState.Selected">
            <summary>
            Cell is selected.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridLinesVisibility">
            <summary>
            Specifies constants that define which grid lines separating grid cells are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridLinesVisibility.None">
            <summary>
            No grid lines are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridLinesVisibility.Horizontal">
            <summary>
            Only horizontal grid lines, which separate rows, are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridLinesVisibility.Vertical">
            <summary>
            Only vertical grid lines, which separate columns, are shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridLinesVisibility.All">
            <summary>
            Both horizontal and vertical grid lines are shown.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridAllowResizing">
            <summary>
            Specifies a value that defines which elements can be resized.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowResizing.None">
            <summary>
            No grid elements can be resized.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowResizing.Columns">
            <summary>
            User can resize columns.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowResizing.Rows">
            <summary>
            User can resize rows.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowResizing.Both">
            <summary>
            User can resize rows and columns.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridZoomMode">
            <summary>
            Defines constants that specify the current mode for zoom behavior.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridZoomMode.Disabled">
            <summary>
            Zoom of content is disabled.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridZoomMode.Enabled">
            <summary>
            Zoom of content is enabled.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridAllowDragging">
            <summary>
            Defines constants that specify which grid elements can be moved to new positions with drag.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowDragging.None">
            <summary>
            No grid elements can be moved with drag.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowDragging.Columns">
            <summary>
            User can drag columns to new positions.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowDragging.Rows">
            <summary>
            User can drag rows to new positions.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridAllowDragging.Both">
            <summary>
            User can drag both columns and rows to new positions.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridTabAction">
            <summary>
            Defines constants that specify which action to perform when Tab key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridTabAction.None">
            <summary>
            No special action.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridTabAction.Cycle">
            <summary>
            Move the selection to the next column, then wrap to the next row, then out of the control.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridEnterAction">
            <summary>
            Defines constants that specify which action to perform when Enter key is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridEnterAction.None">
            <summary>
            No special action.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridEnterAction.MoveDown">
            <summary>
            Move the selection to the next row.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridMouseOverMode">
            <summary>
            Defines constants that specify grid mouse over mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridMouseOverMode.None">
            <summary>
            No special action.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridMouseOverMode.Selection">
            <summary>
            The mouse-over style applies to cells according to <see cref="T:C1.Blazor.Grid.GridSelectionMode"/>
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridMouseOverMode.Cell">
            <summary>
            The mouse-over style applies to a single cell at a time.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridMouseOverMode.Row">
            <summary>
            The mouse-over style applies to the entire row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridMouseOverMode.Column">
            <summary>
            The mouse-over style applies to the entire column.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridScaleMode">
            <summary>
            Specifies how the grid content should be scaled to fit the page.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridScaleMode.ActualSize">
            <summary>
            Render the grid in actual size, breaking pages as needed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridScaleMode.PageWidth">
            <summary>
            Scale the grid so it fits the page width.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridScaleMode.SinglePage">
            <summary>
            Scale the grid so it fits on a single page.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridScaleMode.Selection">
            <summary>
            Prints the current selection in actual size, breaking pages as needed.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlAdapter">
            <summary>
            Implements the functionality to create grid cells dynamically.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlAdapter"/> class.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.Grid">
            <summary>
            Gets the associated grid.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.Contains(C1.Blazor.Grid.GridControlAdapter)">
            <summary>
            Returns true if the specified <paramref name="adapter"/> is the same instance as this or if it is one of the nested adapters.
            </summary>
            <param name="adapter"></param>
            <returns></returns>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.FullRange">
            <summary>
            Gets a range containing all the rows and columns
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnsCount">
            <summary>
            Gets the total number of columns.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowsCount">
            <summary>
            Gets the total number of rows.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.NavigableRange">
            <summary>
            Gets the range of cells where a user can navigate with the keyboard as well as edit  and select cells 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.DefaultColumn">
            <summary>
            Gets the default column dimensions.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.DefaultRow">
            <summary>
            Gets the default row dimensions.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetDefaultColumn">
            <summary>
            Gets the default column dimensions.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetDefaultRow">
            <summary>
            Gets the default row dimensions.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetColumnInfo(System.Int32)">
            <summary>
            Gets the dimensions for the specified column.
            </summary>
            <param name="column">The index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetRowInfo(System.Int32)">
            <summary>
            Gets the dimensions for the specified row.
            </summary>
            <param name="row">The index of the row.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetMergedRange(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Gets a <see cref="T:C1.Blazor.Grid.GridControlRange" /> that specifies the merged extent of a cell.
            </summary>
            <param name="range">The range of the original cell.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanSetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Determines whether the with of a column can be set.
            </summary>
            <param name="row">The index of the row from which the column width is set either by dragging or double clicking.</param>
            <param name="column">The index of the column.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Sets the width of the specified column.
            </summary>
            <param name="column">The index of the column.</param>
            <param name="width">The width of the column.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanSetRowHeight(System.Int32,System.Int32)">
            <summary>
            Determines whether the height of the row can be set.
            </summary>
            <param name="row">The index of the row.</param>
            <param name="column">The index of the column from which the row height is set either by dragging or double clicking.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.SetRowHeight(System.Int32,System.Double)">
            <summary>
            Sets the height of the row.
            </summary>
            <param name="row">The index of the row.</param>
            <param name="height">The height of the row.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.SaveDesiredCellSize(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Returns whether the desired size for a specific cell is taken into account.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlAdapter.ColumnInfo">
            <summary>
            Contains the dimensions of a column.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.#ctor(C1.Blazor.Grid.GridLength,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlAdapter.ColumnInfo"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="minWidth">The minimum width.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="isVisible">if set to <c>true</c> the column is visible.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.Width">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.MinWidth">
            <summary>
            Gets the minimum width of the column.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.MaxWidth">
            <summary>
            Gets the maximum width of the column.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.IsVisible">
            <summary>
            Gets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.DesiredWidth">
            <summary>
            Gets the desired width of the column.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.RenderWidth">
            <summary>
            Gets the render width of the column.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.op_Equality(C1.Blazor.Grid.GridControlAdapter.ColumnInfo,C1.Blazor.Grid.GridControlAdapter.ColumnInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ColumnInfo.op_Inequality(C1.Blazor.Grid.GridControlAdapter.ColumnInfo,C1.Blazor.Grid.GridControlAdapter.ColumnInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlAdapter.RowInfo">
            <summary>
            Contains the dimensions of a row.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.RowInfo.#ctor(C1.Blazor.Grid.GridLength,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlAdapter.RowInfo"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="minHeight">The minimum height.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="isVisible">if set to <c>true</c> the row is visible.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.Height">
            <summary>
            Gets the height of the row.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.MinHeight">
            <summary>
            Gets the minimum height of the row.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.MaxHeight">
            <summary>
            Gets the maximum height of the row.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.IsVisible">
            <summary>
            Gets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.DesiredHeight">
            <summary>
            Gets the desired height of the row.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapter.RowInfo.RenderHeight">
            <summary>
            Gets the render height of the row.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.RowInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.RowInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.RowInfo.op_Equality(C1.Blazor.Grid.GridControlAdapter.RowInfo,C1.Blazor.Grid.GridControlAdapter.RowInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.RowInfo.op_Inequality(C1.Blazor.Grid.GridControlAdapter.RowInfo,C1.Blazor.Grid.GridControlAdapter.RowInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetColumnOffset(System.Int32)">
            <summary>
            Gets the distance between the origin and the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetColumnOffset(System.Int32,System.Int32)">
            <summary>
            Gets the distance between the two specified columns.
            </summary>
            <param name="fromColumn">From column.</param>
            <param name="toColumn">To column.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetRowOffset(System.Int32)">
            <summary>
            Gets the distance between the origin and the specified row.
            </summary>
            <param name="row">The row.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetRowOffset(System.Int32,System.Int32)">
            <summary>
            Gets the distance between the two specified rows.
            </summary>
            <param name="fromRow">From row.</param>
            <param name="toRow">To row.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetFrozenRows">
            <summary>
            Gets the number of frozen rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetFrozenColumns">
            <summary>
            Gets the number of frozen columns.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetCellText(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Gets the text representing the content of a cell.
            </summary>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.SetCellValue(C1.Blazor.Grid.GridControlRange,System.Object)">
            <summary>
            Sets the value of a specified cell.
            </summary>
            <param name="range">The range.</param>
            <param name="value">The value to be set in the cell.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.AllowEditing(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Returns true when the cell in the specified range can be edited.
            </summary>
            <param name="range">The range of the cell being edited.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetCellEditorFragment(C1.Blazor.Grid.GridControlRange)">
            <summary>
            Creates the cell editor.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.GetCellEditorFragment(C1.Blazor.Grid.GridControlRange,System.Action{Microsoft.AspNetCore.Components.ComponentBase})">
            <summary>
            Creates the cell editor.
            </summary>
            <param name="range">The range.</param>
            <param name="editorCreated">A function that must be called when the editor reference is created.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.OnEditEnded(C1.Blazor.Grid.GridControlRange,Microsoft.AspNetCore.Components.ComponentBase,System.Boolean)">
            <summary>
            Called when the editing of a cell ended.
            </summary>
            <param name="range">The range that was edited.</param>
            <param name="editor">The editor.</param>
            <param name="editCancelled"><c>true</c> if the editing was cancelled.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:C1.Blazor.Grid.GridControlAdapter.RowsChanging">
            <summary>
            Occurs before rows changed.
            </summary>
        </member>
        <member name="E:C1.Blazor.Grid.GridControlAdapter.RowsChanged">
            <summary>
            Occurs after rows changed.
            </summary>
        </member>
        <member name="E:C1.Blazor.Grid.GridControlAdapter.ColumnsChanging">
            <summary>
            Occurs before columns changed.
            </summary>
        </member>
        <member name="E:C1.Blazor.Grid.GridControlAdapter.ColumnsChanged">
            <summary>
            Occurs after columns changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.OnRowsChanging(C1.Blazor.Grid.GridControlAdapterNotifyChange)">
            <summary>
            Notifies the adapter there will be changed in the model rows.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.OnRowsChanged(C1.Blazor.Grid.GridControlAdapterNotifyChange)">
            <summary>
            Notifies the adapter there were changes in the model rows.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.OnColumnsChanging(C1.Blazor.Grid.GridControlAdapterNotifyChange)">
            <summary>
            Notifies the adapter there will be changed in the model columns.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.OnColumnsChanged(C1.Blazor.Grid.GridControlAdapterNotifyChange)">
            <summary>
            Notifies the adapter there were changed in the model columns.
            </summary>
            <param name="change">The change.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.ApplySelectionState(C1.Blazor.Grid.GridControlRange,C1.Blazor.Core.C1Style)">
            <summary>
            Applies the selection brushes.
            </summary>
            <param name="range">The range.</param>
            <param name="style">The style that will be applied to the cell.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanDragColumn(System.Int32,System.Int32)">
            <summary>
            Determines whether the column can be dragged.
            </summary>
            <param name="row">The index of the row from which the column is dragged.</param>
            <param name="column">The index of the column to be dragged.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanDropColumn(System.Int32,System.Int32)">
            <summary>
            Determines whether the <paramref name="from"/> column can dropped at the <paramref name="to"/> position.
            </summary>
            <param name="from">The original index of the column.</param>
            <param name="to">The index were the column would be dropped.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanDragRow(System.Int32,System.Int32)">
            <summary>
            Determines whether the row can be dragged.
            </summary>
            <param name="row">The index of the row to be dragged.</param>
            <param name="column">The index of the column from which the row is dragged.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.CanDropRow(System.Int32,System.Int32)">
            <summary>
            Determines whether the <paramref name="from"/> row can dropped at the <paramref name="to"/> position.
            </summary>
            <param name="from">The original index of the row.</param>
            <param name="to">The index were the row would be dropped.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.DropColumnAsync(System.Int32,System.Int32)">
            <summary>
            Drops the column from the original index <paramref name="from"/> to the index <paramref name="to"/>.
            </summary>
            <param name="from">The original index of the column.</param>
            <param name="to">The index were the column was dropped.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapter.DropRowAsync(System.Int32,System.Int32)">
            <summary>
            Drops the row from the original index <paramref name="from"/> to the index <paramref name="to"/>.
            </summary>
            <param name="from">The original index of the row.</param>
            <param name="to">The index were the row was dropped.</param>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlAdapterNotifyChange">
            <summary>
            Contains information about changes that occurred in the grid and are notified to the adapter.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.IsVisible">
            <summary>
            Gets a value indicating how the visibility change was toggled.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.IsAnimated">
            <summary>
            Gets whether this change should be animated.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.NewItemsCount">
            <summary>
            Gets the number of new items.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.OldItemsCount">
            <summary>
            Gets the number of old items.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlAdapterNotifyChange.OldStartingIndex">
            <summary>
            Gets the index at which a Move, Remove, or Replace action occurred.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateAddChange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the add change.
            </summary>
            <param name="newStartingIndex">New index of the starting.</param>
            <param name="count">The count.</param>
            <param name="isAnimated">Whether the change should be animated.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateRemoveChange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the remove change.
            </summary>
            <param name="oldStartingIndex">Index of the removed item.</param>
            <param name="count">The count.</param>
            <param name="isAnimated">Whether the change should be animated.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateReplaceChange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the replace change.
            </summary>
            <param name="startingIndex">The index of the replaced items.</param>
            <param name="oldItemsCount">The number of replaced items.</param>
            <param name="newItemsCount">The number of items that replace the original ones.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateMoveChange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates the move change.
            </summary>
            <param name="oldStartingIndex">Index of the moved item.</param>
            <param name="newStartingIndex">New index of the moved item.</param>
            <param name="count">The number of items moved.</param>
            <param name="isAnimated">Whether the change should be animated.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateResetChange">
            <summary>
            Creates the reset change.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateVisibilityChange(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a visibility change.
            </summary>
            <param name="startingIndex"></param>
            <param name="count"></param>
            <param name="isVisible"></param>
            <param name="isAnimated">Whether the change should be animated.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlAdapterNotifyChange.CreateDimensionChange(System.Int32)">
            <summary>
            Creates a change in the dimensions of a column or row.
            </summary>
            <param name="index">The index of the column or row.</param>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction">
            <summary>
            Describes the action that caused a <see cref="T:C1.Blazor.Grid.GridControlAdapterNotifyChange"/> event.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Add">
            <summary>
            An item was added to the collection.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Remove">
            <summary>
            An item was removed from the collection. 
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Replace">
            <summary>
            An item was replaced in the collection.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Move">
            <summary>
            An item was moved within the collection.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Reset">
            <summary>
            The content of the collection was cleared.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Visibility">
            <summary>
            The visibility of one or more items changed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlAdapterNotifyChangeAction.Dimension">
            <summary>
            The dimension of one of the items changed.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlKeyboardHandler">
            <summary>
            Handles the keyboard actions.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlKeyboardHandler.Grid">
            <summary>
            Gets the associated grid.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlKeyboardHandler.HandleInput(Microsoft.AspNetCore.Components.ChangeEventArgs)">
            <summary>
            Called when text is entered in the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlKeyboardHandler.HandleKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Called when a KeyDown event occurs.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlKeyboardHandler.NavigatePageUpDown(System.Int32,System.Boolean)">
            <summary>
            Navigates selection, and viewport in corresponding to PageUp/Down
            </summary>
            <param name="deltaY">The number of rows to navigate</param>
            <param name="shift">Whether shift button is pressed</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlKeyboardHandler.SumRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sums a delta number of rows skipping invisible rows and merged ranges.
            </summary>
            <param name="row">The column.</param>
            <param name="column">The column.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlKeyboardHandler.SumColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sums a delta number of columns skipping invisible columns and merged ranges.
            </summary>
            <param name="row">The column.</param>
            <param name="column">The column.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Grid.GridLength">
            <summary>
            Used to define the size of the columns of <see cref="!:FlexGrid"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridLength" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.#ctor(System.Double,C1.Blazor.Grid.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridLength" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.Star">
            <summary>
            A ready to reuse GridLength of GridUnitType.Star with a Value of 1.
            </summary>
            <remarks>
            If a Value other than 1 is needed with GridUnitType.Star, then use the constructor GridLength (value, GridUnitType.Star).
            </remarks>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.GridUnitType">
            <summary>
            Gets the GridUnitType of the GridLength
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.IsAbsolute">
            <summary>
            Gets whether or not the GridUnitType of the GridLength is GridUnitType.Absolute.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.IsAuto">
            <summary>
            Gets whether or not the GridUnitType of the GridLength is GridUnitType.Auto.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.IsStar">
            <summary>
            Gets a value that indicates whether the GridUnitType of the GridLength is GridUnitType.Star.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridLength.Value">
            <summary>
            Gets the Value of the GridLength.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.op_Implicit(System.Double)~C1.Blazor.Grid.GridLength">
            <summary>
            Casting operator to convert a double into a GridLength of type GridUnitType.Absolute.
            </summary>
            <param name="absoluteValue">The absolute size.</param>
            <returns>
            A GridLength of type GridUnitType.Absolute and of size absolute size.
            </returns>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.op_Implicit(System.String)~C1.Blazor.Grid.GridLength">
            <summary>
            Casting operator to convert a string into a GridLength.
            </summary>
            <param name="lengthString">The string specifying a length.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.Parse(System.String)">
            <summary>
            Parses a string into a <see cref="T:C1.Blazor.Grid.GridLength"/>.
            </summary>
            <param name="lengthString">The string to be parsed.</param>
        </member>
        <member name="M:C1.Blazor.Grid.GridLength.op_Addition(C1.Blazor.Grid.GridLength,C1.Blazor.Grid.GridLength)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="l1">The l1.</param>
            <param name="l2">The l2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:C1.Blazor.Grid.GridUnitType">
            <summary>
            Enumerates values that control how the GridLength.Value property is interpreted for row and column definitions.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridUnitType.Absolute">
            <summary>
            Interpret the GridLength.Value property value as the number of device-specific units.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridUnitType.Star">
            <summary>
            Interpret the GridLength.Value property value as a proportional weight, to be laid out after rows and columns with GridUnitType.Absolute or GridUnitType.Auto are accounted for.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlPanel">
            <summary>
            Panel that renders the cells in a grid according to the properties <see cref="P:C1.Blazor.Grid.GridControlPanel.DisplayRange"/> and <see cref="P:C1.Blazor.Grid.GridControlPanel.Viewport"/>.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.Grid">
            <summary>
            Gets the associated grid.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.DisplayRange">
            <summary>
            Gets the range of cells that will be displayed in this panel.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.Viewport">
            <summary>
            Gets the visible rectangle expressed in pixels. Notice the cells out of this area won't be created despite they are in the <see cref="P:C1.Blazor.Grid.GridControlPanel.DisplayRange"/>.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.Adapter">
            <summary>
            Gets the associated adapter.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.IsReadOnly">
            <summary>
            Gets or sets whether the cells show the editor.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.SaveCellsDesiredSize">
            <summary>
            Gets or sets whether the cells desired size is saved.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.ApplySelection">
            <summary>
            Gets or sets whether the selection will be applied in the rendered cells.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.OuterBorders">
            <summary>
            Gets or sets whether the borders of the cells in the edge will be shown.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.RenderModel">
            <summary>
            Gets or sets whether the panel needs to render the model information that will be used by JavaScript functions to perform client operations.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlPanel.MergingRange">
            <summary>
            Gets or sets the range used limit the cells after the merging.
            </summary>
            <remarks>
            If not specified, <see cref="P:C1.Blazor.Grid.GridControlPanel.DisplayRange"/> will be used instead.
            </remarks>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlRange">
            <summary>
            Represents a range of cells
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridControlCellView">
            <summary>
            Contains properties that will be applied to cell view elements.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView._selectedBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the color of selected cell / row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> that is used to paint the color of mouse over cell / row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView._isMouseOver">
            <summary>
            Gets or sets the mouse over state.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView._isSelected">
            <summary>
            Gets or sets the mouse over state.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlCellView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Grid.GridControlCellView"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlCellView.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Grid.GridControlCellView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView.SelectedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.GridControlCellView.SelectedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlCellView.SelectedBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the color of selected cell / row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.GridControlCellView.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlCellView.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> that is used to paint the color of mouse over cell / row.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.GridControlCellView.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlCellView.IsMouseOver">
            <summary>
            Gets or sets the mouse over state.
            </summary>
        </member>
        <member name="F:C1.Blazor.Grid.GridControlCellView.IsSelectedProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Grid.GridControlCellView.IsSelected"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridControlCellView.IsSelected">
            <summary>
            Gets or sets the mouse over state.
            </summary>
        </member>
        <member name="T:C1.Blazor.Grid.GridRowColumnView">
            <summary>
            Visual representation of a column or row.
            </summary>
        </member>
        <member name="M:C1.Blazor.Grid.GridRowColumnView.InitializeUI(C1.Blazor.Grid.C1GridControl)">
            <summary>
            Initializes the UI.
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="P:C1.Blazor.Grid.GridRowColumnView.HeadersPanel">
            <summary>
            Gets the panel that contains the headers.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridRowColumnView.CellsPanel">
            <summary>
            Gets the panel that contains the cells.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridRowColumnView.IsColumn">
            <summary>
            Gets or sets a value indicating whether this element represent a column or row.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridRowColumnView.CrossOffset">
            <summary>
            Gets or sets the offset of the cells.
            </summary>
        </member>
        <member name="P:C1.Blazor.Grid.GridSelectionLayer.Marquee">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Border"/> used to show the Excel-style marquee around 
            the current selection.
            </summary>
        </member>
    </members>
</doc>
