@page "/rowdetails"
@using Resources
@using System.Collections.ObjectModel;
@using C1.Blazor.Core
@using C1.Blazor.Grid
@using C1.Blazor.Input

<h1>@AppResources.RowDetailsTitle</h1>
<p>@AppResources.RowDetailsDescription</p>

<p>
    Detail Visibilty Mode <C1ComboBox ItemsSource="detailVisibilityModes" @bind-SelectedItem="detailVisibilityMode" />
</p>

<FlexGrid IsReadOnly="true" AutoGenerateColumns="false" HeadersVisibility="GridHeadersVisibility.All" ItemsSource="customers" Style="@("max-height:50vh")">
    <FlexGridColumns>
        <GridColumn Binding="Id" Width="80" />
        <GridColumn Binding="FirstName" Width="GridLength.Star" />
        <GridColumn Binding="LastName" Width="GridLength.Star" />
    </FlexGridColumns>
    <FlexGridBehaviors>
        <FlexGridDetailProvider TItem="IEnumerable<City>" Height="200" DetailVisibilityMode="detailVisibilityMode" DetailLoading="OnDetailLoading">
            <FlexGrid ItemsSource="@context" Style="@("height:100%")">
                <FlexGridBehaviors>
                    <CheckListBehavior SelectionBinding="Selected" />
                </FlexGridBehaviors>
            </FlexGrid>
        </FlexGridDetailProvider>
    </FlexGridBehaviors>
</FlexGrid>

@code {
    ObservableCollection<Customer> customers;
    GridDetailVisibilityMode detailVisibilityMode = GridDetailVisibilityMode.ExpandMultiple;
    GridDetailVisibilityMode[] detailVisibilityModes = new GridDetailVisibilityMode[] { GridDetailVisibilityMode.ExpandMultiple, GridDetailVisibilityMode.ExpandSingle, GridDetailVisibilityMode.Selection };

    protected override void OnInitialized()
    {
        customers = Customer.GetCustomerList(100);
    }

    private async void OnDetailLoading(object sender, GridDetailLoadingEventArgs<IEnumerable<City>> e)
    {
        var deferral = e.GetDeferral();
        try
        {
            await Task.Delay(1000);//Simulates network traffic.
            e.DetailRow.DataSource = Customer.GetCities();
        }
        finally
        {
            deferral.Complete();
        }
    }
}
