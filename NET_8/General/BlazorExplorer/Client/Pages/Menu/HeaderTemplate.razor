@page "/Menu/HeaderTemplate"
@using C1.Blazor.Menu
@using C1.Blazor.Core
@using C1.Blazor.Input
@using Localization

<style>
    .name {
        float: left;
        line-height: 30px;
    }
</style>
<div>
    <div class="name">Last Name</div>
    <div class="icon">
        <C1Menu SubMenuStyle="@("width: 282px;")">
            <C1MenuItem HeaderTemplate="@GetIcon("Content/images/three-dots.png")">
                <C1MenuItem HeaderTemplate="GetAscending()" />
                <C1MenuItem HeaderTemplate="GetDescending()" />
                <C1MenuSeparator />
                <C1MenuItem HeaderTemplate="GetResizing()" />
                <C1MenuSeparator SeparatorStyle="@("margin-bottom: 5px;")" />
                <C1MenuItem HeaderTemplate="GetTextBox()" />
                <C1MenuItem HeaderTemplate="GetMatchTemplate()" ClickToCloseMenu="false" />
            </C1MenuItem>
        </C1Menu>
    </div>
</div>
<_Sections>
    <Title>@MenuRes.HeaderTemplate_Title</Title>
    <Description>@((MarkupString)MenuRes.HeaderTemplate_Description)</Description>
</_Sections>

@code {
    bool? openOnClick = false, closeOnLeave = false, displayExpandedIcon = true,
        matchCase = false, matchWholeWord = false;

    C1.Blazor.Core.C1Style style = new C1.Blazor.Core.C1Style() { ["margin-right"] = "5px;" };

    private RenderFragment GetIcon(string path)
    {
        return new RenderFragment(builder =>
        {
            builder.OpenElement(0, "img");
            builder.AddAttribute(1, "style", new C1.Blazor.Core.C1Style() { Width = "13px", Height = "13px" });
            builder.AddAttribute(2, "src", path);
            builder.CloseElement();
        });
    }

    private RenderFragment GetAscending()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenElement(0, "div");

            builder.OpenElement(1, "span");
            builder.AddAttribute(2, "style", style);
            builder.AddContent(3, GetIcon("Content/images/ascending.png"));
            builder.CloseElement();

            builder.OpenElement(3, "span");
            builder.AddContent(4, MenuRes.SortAscending);
            builder.CloseElement();

            builder.CloseElement();
        });
    }

    private RenderFragment GetDescending()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenElement(0, "div");

            builder.OpenElement(1, "span");
            builder.AddAttribute(2, "style", style);
            builder.AddContent(3, GetIcon("Content/images/descending.png"));
            builder.CloseElement();

            builder.OpenElement(3, "span");
            builder.AddContent(4, MenuRes.SortDescending);
            builder.CloseElement();

            builder.CloseElement();
        });
    }

    private RenderFragment GetResizing()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenElement(0, "div");
            builder.OpenElement(1, "span");
            builder.AddAttribute(2, "style", style);
            builder.AddContent(3, GetIcon("Content/images/resizing.jpg"));
            builder.CloseElement();

            builder.OpenElement(3, "span");
            builder.AddContent(4, MenuRes.AutoSizeColumn);
            builder.CloseElement();

            builder.CloseElement();
        });
    }

    private RenderFragment GetTextBox()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenComponent<C1TextBox>(0);
            builder.AddAttribute(1, nameof(C1TextBox.Placeholder), MenuRes.EnterTextToFilter);
            builder.AddAttribute(2, nameof(C1TextBox.Style), new C1.Blazor.Core.C1Style() { Width = "100%" });
            builder.CloseComponent();
        });
    }

    private RenderFragment GetMatchTemplate()
    {
        return new RenderFragment(builder =>
        {
            builder.OpenElement(0, "div");

            builder.OpenElement(1, "label");
            builder.AddAttribute(2, "style", new C1.Blazor.Core.C1Style() { ["margin-right"] = "12px", FontWeight = "normal" });

            builder.OpenComponent<C1CheckBox>(6);
            builder.AddAttribute(7, "style", style);
            builder.AddAttribute(8, nameof(C1CheckBox.IsChecked), matchCase);
            builder.AddAttribute(9, nameof(C1CheckBox.IsCheckedChanged), EventCallback.Factory.Create<bool?>(this, (arg) => { matchCase = arg; }));
            builder.CloseComponent();

            builder.AddContent(10, MenuRes.MatchCase);
            builder.CloseElement();

            builder.OpenElement(11, "label");
            builder.AddAttribute(12, "style", new C1.Blazor.Core.C1Style() { FontWeight = "normal" });

            builder.OpenComponent<C1CheckBox>(13);
            builder.AddAttribute(16, "style", style);
            builder.AddAttribute(17, nameof(C1CheckBox.IsChecked), matchWholeWord);
            builder.AddAttribute(18, nameof(C1CheckBox.IsCheckedChanged), EventCallback.Factory.Create<bool?>(this, (arg) => { matchWholeWord = arg; }));
            builder.CloseComponent();

            builder.AddContent(20, MenuRes.MatchWholeWord);
            builder.CloseElement();


            builder.CloseElement();
        });
    }
}