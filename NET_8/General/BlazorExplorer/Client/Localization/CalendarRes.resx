<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomStylesDescription" xml:space="preserve">
    <value>C1Calendar supports customising the style and appearance of the C1Calendar including slot border and color.</value>
  </data>
  <data name="CustomStylesTitle" xml:space="preserve">
    <value>Custom Styles</value>
  </data>
  <data name="IconTemplateDescription" xml:space="preserve">
    <value>C1Calendar supports customising the button icon by a html struct.</value>
  </data>
  <data name="IconTemplateTitle" xml:space="preserve">
    <value>Icon Template</value>
  </data>
  <data name="ItemTemplateDescription" xml:space="preserve">
    <value>C1Calendar supports customising of the slot item by a html struct.</value>
  </data>
  <data name="ItemTemplateTitle" xml:space="preserve">
    <value>Item Template</value>
  </data>
  <data name="ModelBindingDescription" xml:space="preserve">
    <value>This section briefly explains how to bind the value to the C1Calendar component.</value>
  </data>
  <data name="ValidationDescription" xml:space="preserve">
    <value>This sample shows how to set item-validator attribute to a function to determine whether dates are valid for selection.</value>
  </data>
  <data name="ValidationHeader" xml:space="preserve">
    <value>Use this Calendar control to select a date. Notice you won't be able to select weekends.</value>
  </data>
  <data name="ModelBindingTitle" xml:space="preserve">
    <value>Model Binding</value>
  </data>
  <data name="ValidationTitle" xml:space="preserve">
    <value>Validation</value>
  </data>
  <data name="MultipleMonthsTitle" xml:space="preserve">
    <value>Multiple Months</value>
  </data>
  <data name="MultipleMonthsTitleDescription" xml:space="preserve">
    <value>Calendar displays months following MonthCount Property entered by user code.</value>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>The example shows a C1Calendar control that allows users to select the date with a single click.</value>
  </data>
  <data name="OverviewSummary" xml:space="preserve">
    <value>The C1Calendar control displays a one-month calendar and allows users to select a date.</value>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="UsingRangesDescription" xml:space="preserve">
    <value>C1Calendar control can prevent users from selecting values outside of a range determined by the min and max properties.</value>
  </data>
  <data name="UsingRangesTitle" xml:space="preserve">
    <value>Using Ranges</value>
  </data>
  <data name="DisplayDateText" xml:space="preserve">
    <value>Display Date</value>
  </data>
  <data name="SelectedDateText" xml:space="preserve">
    <value>Selected Date</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>Good</value>
  </data>
  <data name="Incident" xml:space="preserve">
    <value>Incident</value>
  </data>
  <data name="IssueFound" xml:space="preserve">
    <value>Issue Found</value>
  </data>
  <data name="Maintenance" xml:space="preserve">
    <value>Maintenance</value>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>Friday</value>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>Monday</value>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>Saturday</value>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>Sunday</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>Thursday</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>Tuesday</value>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>Wednesday</value>
  </data>
  <data name="CustomSlotsDescription" xml:space="preserve">
    <value>Shows how to customize &lt;mark code&gt;C1Calendar&lt;/mark&gt; throughout the Adapter.</value>
  </data>
  <data name="CustomSlotsTitle" xml:space="preserve">
    <value>Custom Slots</value>
  </data>
</root>