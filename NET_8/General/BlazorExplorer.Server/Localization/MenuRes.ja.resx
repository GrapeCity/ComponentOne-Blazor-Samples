<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateFile" xml:space="preserve">
    <value>新規ファイルの作成</value>
  </data>
  <data name="EnterTextToFilter" xml:space="preserve">
    <value>フィルタリングするテキストを入力</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>終了</value>
  </data>
  <data name="ExitApplication" xml:space="preserve">
    <value>アプリケーションの終了</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>ファイル</value>
  </data>
  <data name="HeaderTemplate_Description" xml:space="preserve">
    <value>サンプルでは、&lt;b&gt;HeaderTemplate&lt;/b&gt; プロパティを作成して C1Menu のヘッダーをカスタム化する方法を示しています。</value>
  </data>
  <data name="HeaderTemplate_Title" xml:space="preserve">
    <value>ヘッダーテンプレート</value>
  </data>
  <data name="Index_Description" xml:space="preserve">
    <value>サンプルは、垂直方向と水平方向のデフォルトメニューを示しています。&lt;b&gt;OnItemSelected&lt;/b&gt; イベントを使用して、アイテムがクリックされたときに実行するアクションを決定します。&lt;br/&gt;
サブメニューポップアップを表示するには、&lt;b&gt;OpenOnClick&lt;/b&gt; プロパティを設定してクリックまたはホバーした C1MenuItem の２つの方法があります。</value>
    <comment>The sample shows default menu for vertical and horizontal orientation. Use the &lt;b&gt;OnItemSelected&lt;/b&gt; event to determine what action to take when item is clicked. &lt;br/&gt;
There are two ways to display sub-menu popup: clicked or hoverred C1MenuItem by setting &lt;b&gt;OpenOnClick&lt;/b&gt; property.</comment>
  </data>
  <data name="Index_Title" xml:space="preserve">
    <value>概要</value>
  </data>
  <data name="Inline" xml:space="preserve">
    <value>水平メニュー</value>
    <comment>Horizontal menu</comment>
  </data>
  <data name="ItemTemplate_Description" xml:space="preserve">
    <value>サンプルは、&lt;b&gt;ItemTemplate&lt;/b&gt; プロパティでテンプレートを設定してメニュー項目をカスタム化する方法を示します。</value>
    <comment>The sample shows how to custom menu item by setting template in &lt;b&gt;ItemTemplate&lt;/b&gt; property</comment>
  </data>
  <data name="ItemTemplate_Title" xml:space="preserve">
    <value>項目テンプレート</value>
    <comment>ItemTemplate</comment>
  </data>
  <data name="New" xml:space="preserve">
    <value>新規</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>開く</value>
  </data>
  <data name="OpenFile" xml:space="preserve">
    <value>既存のファイルまたはフォルダを開く</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="SaveFile" xml:space="preserve">
    <value>現在のファイルを保存</value>
  </data>
  <data name="Selected_Menu_Item" xml:space="preserve">
    <value>選択したメニュー項目</value>
    <comment>Selected Menu-item</comment>
  </data>
  <data name="SideBar" xml:space="preserve">
    <value>垂直メニュー</value>
    <comment>Vertical menu</comment>
  </data>
  <data name="Unbound_Description" xml:space="preserve">
    <value>サンプルは、垂直方向と水平方向のバインドされていないメニューを示します。</value>
    <comment>The sample shows unbound menu for vertical and horizontal orientation.</comment>
  </data>
  <data name="Unbound_Title" xml:space="preserve">
    <value>アンバウンド</value>
    <comment>Unbound</comment>
  </data>
  <data name="SortAscending" xml:space="preserve">
    <value>昇順に並べ替え</value>
    <comment>SortAscending</comment>
  </data>
  <data name="SortDescending" xml:space="preserve">
    <value>降順に並べ替え</value>
    <comment>SortDescending</comment>
  </data>
  <data name="AutoSizeColumn" xml:space="preserve">
    <value>列の自動リサイズ</value>
    <comment>AutoSizeColumn</comment>
  </data>
  <data name="MatchCase" xml:space="preserve">
    <value>大文字と小文字を区別</value>
    <comment>Match Case</comment>
  </data>
  <data name="MatchWholeWord" xml:space="preserve">
    <value>単語単位</value>
    <comment>Match Whole Word</comment>
  </data>
</root>