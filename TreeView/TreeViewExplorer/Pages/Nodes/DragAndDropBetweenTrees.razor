@page "/nodes/draganddropbetweentrees"
@using C1.Blazor.Core
@using C1.Blazor.TreeView
@using C1.Blazor.Input 
@using System.Collections.ObjectModel

<h3>@((MarkupString)Localization.Resource.DragDropBtwTreesIndex)</h3>

<p>@((MarkupString)Localization.Resource.DragDropBtwTreesDescription)</p>

<div class="mb-5">
    <div>Allow dragging within trees <C1CheckBox @bind-IsChecked="@dragWithin" /></div>
    <div>Allow dragging between trees <C1CheckBox @bind-IsChecked="@dragBetween" /></div>
</div>

<div class="d-flex flex-row">
    <div class="pr-2">
        <C1TreeView Class="shadow" ShowLines="true" AllowDragDrop="true" IsExpandedPath="Expanded" ItemsSource="@_firstTreeDataSource" ChildItemsPaths="Subdirectories" DisplayMemberPaths="Name"
                    Style="@_c1Style" KeyboardNavigation="true" SelectionMode="C1SelectionMode.Extended" OnDragOver="OnDragOverHandler"/>
    </div>
    <div class="pl-2 pr-2">
        <C1TreeView Class="shadow" ShowLines="true" AllowDragDrop="true" IsExpandedPath="Expanded" ItemsSource="@_secondTreeDataSource" ChildItemsPaths="Subdirectories" DisplayMemberPaths="Name"
                    Style="@_c1Style" KeyboardNavigation="true" SelectionMode="C1SelectionMode.Extended" OnDragOver="OnDragOverHandler" />
    </div>
</div>


@code{
    bool? dragWithin = true, dragBetween = true;
    readonly C1Style _c1Style = new C1Style
    {
        Height = 500,
        Width = 300,
    };

    readonly ObservableCollection<Directory> _firstTreeDataSource = new ObservableCollection<Directory>()
    {
        new Directory()
        {
            Name = "FirstTree 1",
            Subdirectories = new ObservableCollection<Directory>
            {
                new Directory
                {
                    Name = "FirstTree 1.1",
                    Subdirectories = new ObservableCollection<Directory>
                    {
                        new Directory {Name = "FirstTree 1.1.1"},
                        new Directory {Name = "FirstTree 1.1.2"},
                        new Directory {Name = "FirstTree 1.1.3"},
                    }

                }
            }
        },
        new Directory
        {
            Name = "FirstTree 2",
            Subdirectories = new ObservableCollection<Directory>()
            {
                new Directory {Name = "FirstTree 2.1"},
                new Directory {Name = "FirstTree 2.2"}
            }
        },
    };
    readonly ObservableCollection<Directory> _secondTreeDataSource = new ObservableCollection<Directory>()
    {
        new Directory()
        {
            Name = "SecondTree 1",
            Subdirectories = new ObservableCollection<Directory>
            {
                new Directory
                {
                    Name = "SecondTree 1.1",
                    Subdirectories = new ObservableCollection<Directory>
                    {
                        new Directory {Name = "SecondTree 1.1.1"},
                        new Directory {Name = "SecondTree 1.1.2"},
                        new Directory {Name = "SecondTree 1.1.3"},
                    }

                }
            }
        },
        new Directory
        {
            Name = "SecondTree 2",
            Subdirectories = new ObservableCollection<Directory>()
            {
                new Directory {Name = "SecondTree 2.1"},
                new Directory {Name = "SecondTree 2.2"}
            }
        },
    };

    public class Directory
    {
        public string Name { get; set; }
        public ObservableCollection<Directory> Subdirectories { get; set; } = new();
        public bool Expanded { get; set; } = true;
    }

    void OnDragOverHandler(object sender, C1.Blazor.TreeView.EventArgs.TreeViewDragDropEventArgs arg)
    {
        if(arg.TargetDragTree == arg.TargetDropTree && !dragWithin.Value)
        {
            arg.Cancel = true;
        }

        if (arg.TargetDragTree != arg.TargetDropTree && dragBetween.Value)
        {
            arg.Cancel = false;
        }
    }
}
