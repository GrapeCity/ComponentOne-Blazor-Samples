@page "/nodes/showcheckboxes"
@using C1.Blazor.Core
@using C1.Blazor.TreeView
@using C1.Blazor.Input

<style>
</style>
<div class="pb-2">ShowCheckboxes <C1CheckBox @bind-IsChecked="@showCheckboxes" /></div>

<div class="d-flex flex-row">
    <div class="p-2">
        <C1TreeView @ref="treeView" Class="@("p-2 shadow")" ShowLines="false" IsExpandedPath="Expanded" ItemsSource="@_dataSource" ChildItemsPaths="Subdirectories" DisplayMemberPaths="Name"
                    Style="@_c1Style" KeyboardNavigation="true" SelectionMode="C1SelectionMode.Extended" ExpandMode="TreeViewExpandMode.Multiple"
                    ShowCheckboxes="@showCheckboxes.Value" OnItemSelected="OnItemSelected">
        </C1TreeView>
    </div>
    <div class="p-2">
        @((MarkupString)selectedItems)
    </div>
</div>



@code{
    C1TreeView treeView;
    string selectedItems;
    bool? showCheckboxes = true;
    readonly C1Style _c1Style = new C1Style
    {
        Height = 600,
        Width = 300
    };



    readonly IList<Directory> _dataSource = new List<Directory>()
{
    new Directory()
    {
        Name = "Directory 2",
        Subdirectories = new List<Directory>
{
            new Directory
            {
                Name = "Directory 2.1",
                Subdirectories = new List<Directory>
        {
                    new Directory {Name = "Directory 2.1.1"},
                    new Directory {Name = "Directory 2.1.2"},
                    new Directory
                    {
                        Name = "Directory 2.1.3",
                        Subdirectories = new List<Directory>()
                {
                            new Directory {Name = "Directory 2.1.3.1"},
                            new Directory
                            {
                                Name = "Directory 2.1.3.2",
                                Subdirectories = new List<Directory>()
                        {
                                    new Directory {Name = "Directory 2.1.3.2.1"},
                                    new Directory {Name = "Directory 2.1.3.2.2"}
                                }
                            },
                        }
                    },
                }

            }
        }
    },
    new Directory
    {
        Name = "Directory 3",
        Subdirectories = new List<Directory>()
{
            new Directory {Name = "Directory 3.1"}
        }
    },
    };

    public class Directory
    {
        public string Name { get; set; }
        public List<Directory> Subdirectories { get; set; }
        public bool Expanded { get; set; } = true;
    }

    public void OnItemSelected()
    {
        var items = treeView.GetSelectedItems();
        if (items == null || items.Count == 0) selectedItems = "";
        else
        {
            System.Text.StringBuilder builder = new System.Text.StringBuilder();
            builder.Append("Selected items:<ul>");
            foreach (TreeViewItem item in items)
            {
                builder.Append(string.Format(@"<li>{0}", item.Header));
            }
            selectedItems = builder.ToString();
        }
    }
}