<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Blazor.Core</name>
    </assembly>
    <members>
        <member name="T:C1.Blazor.Core.C1Color">
            <summary>
            Represents a color.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a color from its ARGB components.
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.#ctor(C1.Blazor.Core.C1Color)">
            <summary>
            Create a color from another color.
            </summary>
            <param name="color">Another color.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Color.A">
            <summary>
            Gets alpha channel.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Color.R">
            <summary>
            Gets the red component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Color.G">
            <summary>
            Gets the green component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Color.B">
            <summary>
            Gets the blue component.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.FromArgb(System.Int32)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="v">represent argb value.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="a">The alpha channel.</param>
            <param name="r">The Red component.</param>
            <param name="g">The Green component.</param>
            <param name="b">The Blue component.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.FromArgb(System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            From Argb
            </summary>
            <param name="v"></param>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.ToArgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.ToArgb(C1.Blazor.Core.C1Color)">
            <summary>
            Convert color to Argb reprensentative
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.ToArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert to single int to represent argb
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.op_Implicit(System.String)~C1.Blazor.Core.C1Color">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1Color"/>.
            </summary>
            <param name="colorString">The string specifying the color.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.Parse(System.String)">
            <summary>
            Creates a color from an html string.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.TryParse(System.String,C1.Blazor.Core.C1Color@)">
            <summary>
            Creates a color from an html string.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.op_Equality(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color)">
            <summary>
            Compares two C1Color structures for equality.
            </summary>
            <param name="color1">The first color to compare.</param>
            <param name="color2">The second color to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.op_Inequality(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color)">
            <summary>
            Compares two C1Color structures for inequality.
            </summary>
            <param name="color1">The first color to compare.</param>
            <param name="color2">The second color to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.AreColorsEqual(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color)">
            <summary>
            Compares two colors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.IsVisible(C1.Blazor.Core.C1Color)">
            <summary>
            Returns a value indicating whether specified Color value represents some "visible" value, for example, this function returns <b>false</b> for transparent color.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.IsTransparent(C1.Blazor.Core.C1Color)">
            <summary>
            Check if color is transparent
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.IsOpaque(C1.Blazor.Core.C1Color)">
            <summary>
            Checks if color is opaque
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.TryColorFromString(System.String,C1.Blazor.Core.C1Color@)">
            <summary>
            Try convert color from string
            </summary>
            <param name="v"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.ColorToString(C1.Blazor.Core.C1Color)">
            <summary>
            Color to string
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Color.ColorToHTML(C1.Blazor.Core.C1Color)">
            <summary>
            Color to html
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.C1HorizontalAlignment">
            <summary>
            Represents the horizontal positions of text elements.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1HorizontalAlignment.Left">
            <summary>
            The text is aligned to the left.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1HorizontalAlignment.Right">
            <summary>
            The text is aligned to the right.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1HorizontalAlignment.Center">
            <summary>
            The text is centered.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1HorizontalAlignment.Stretch">
            <summary>
            The text is stretched.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1HtmlButton">
            <summary>
            Thin component wrapper over html button.
            </summary>
            <remarks>This components prevents event bubbling.</remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1HtmlButton.Disabled">
            <summary>
            The disabled attribute for the button.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Style">
            <summary>
            This class simplify the manipulation of CSS properties.
            </summary>
            <remarks>
            The <see cref="M:C1.Blazor.Core.C1Style.Parse(System.String)"/> method allows converting from a standard CSS style string to a <see cref="T:C1.Blazor.Core.C1Style"/> object and <see cref="M:C1.Blazor.Core.C1Style.ToString"/> method converts back to string.
            </remarks>
        </member>
        <member name="M:C1.Blazor.Core.C1Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Style"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Style.#ctor(C1.Blazor.Core.C1Style)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Style"/> class from an existing <paramref name="style"/>.
            </summary>
            <param name="style">The style to be copied.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Display">
            <summary>
            The display property specifies the display behavior (the type of rendering box) of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Position">
            <summary>
            The position property specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky).
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Top">
            <summary>
            The top property affects the vertical position of a positioned element. This property has no effect on non-positioned elements.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Left">
            <summary>
            The left property affects the horizontal position of a positioned element. This property has no effect on non-positioned elements.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Bottom">
            <summary>
            The bottom property affects the vertical position of a positioned element. This property has no effect on non-positioned elements.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Right">
            <summary>
            The right property affects the horizontal position of a positioned element. This property has no effect on non-positioned elements.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.MinWidth">
            <summary>
            The min-width property defines the minimum width of an element.
            </summary>
            <remarks>
            If the content is smaller than the minimum width, the minimum width will be applied.
            If the content is larger than the minimum width, the min-width property has no effect.
            This prevents the value of the <see cref="P:C1.Blazor.Core.C1Style.Width"/> property from becoming smaller than <see cref="P:C1.Blazor.Core.C1Style.MinWidth"/>.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Width">
            <summary>
            The width property sets the width of an element.
            </summary>
            <remarks>
            The width of an element does not include padding, borders, or margins.
            The <see cref="P:C1.Blazor.Core.C1Style.MinWidth"/> and <see cref="P:C1.Blazor.Core.C1Style.MaxWidth"/> properties override the <see cref="P:C1.Blazor.Core.C1Style.Width"/> property.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.MaxWidth">
            <summary>
            The max-width property defines the maximum width of an element.
            </summary>
            <remarks>
            If the content is larger than the maximum width, it will automatically change the height of the element.
            If the content is smaller than the maximum width, the max-width property has no effect.
            This prevents the value of the <see cref="P:C1.Blazor.Core.C1Style.Width"/> property from becoming larger than <see cref="P:C1.Blazor.Core.C1Style.MaxWidth"/>. The value of the <see cref="P:C1.Blazor.Core.C1Style.MaxWidth"/> property overrides the <see cref="P:C1.Blazor.Core.C1Style.Width"/> property.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.MinHeight">
            <summary>
            The min-height property defines the minimum height of an element.
            </summary>
            <remarks>
            If the content is smaller than the minimum height, the minimum height will be applied. 
            If the content is larger than the minimum height, the min-height property has no effect.
            This prevents the value of the <see cref="P:C1.Blazor.Core.C1Style.Height"/> property from becoming smaller than <see cref="P:C1.Blazor.Core.C1Style.MinHeight"/>.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Height">
            <summary>
            The height property sets the height of an element.
            </summary>
            <remarks>
            The height of an element does not include padding, borders, or margins.
            If height: auto; the element will automatically adjust its height to allow its content to be displayed correctly.
            If height is set to a numeric value (like pixels, (r)em, percentages) then if the content does not fit within the specified height, it will overflow. How the container will handle the overflowing content is defined by the overflow property.
            The <see cref="P:C1.Blazor.Core.C1Style.MinHeight"/> and <see cref="P:C1.Blazor.Core.C1Style.MaxHeight"/> properties override the <see cref="P:C1.Blazor.Core.C1Style.Height"/> property.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.MaxHeight">
            <summary>
            The max-height property defines the maximum height of an element.
            </summary>
            <remarks>
            If the content is larger than the maximum height, it will overflow. How the container will handle the overflowing content is defined by the overflow property. 
            If the content is smaller than the maximum height, the max-height property has no effect. .
            This prevents the value of the <see cref="P:C1.Blazor.Core.C1Style.Height"/> property from becoming larger than <see cref="P:C1.Blazor.Core.C1Style.MaxHeight"/>. The value of the <see cref="P:C1.Blazor.Core.C1Style.MaxHeight"/> property overrides the <see cref="P:C1.Blazor.Core.C1Style.Height"/> property.
            </remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.LineHeight">
            <summary>
            property specifies the height of a line.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.VerticalAlign">
            <summary>
            property sets the vertical alignment of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Margin">
            <summary>
            The margin property sets the margins for an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Padding">
            <summary>
            An element's padding is the space between its content and its border.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.FontSize">
            <summary>
            Gets or sets element's font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.FontFamily">
            <summary>
            Gets or sets element's font-family.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.FontWeight">
            <summary>
            Gets or sets element's font-weight.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.FontStyle">
            <summary>
            Gets or sets element's font-weight.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.JustifyContent">
            <summary>
            The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.AlignItems">
            <summary>
            The align-items property specifies the default alignment for items inside the flexible container.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.TextAlign">
            <summary>
            The text-align property specifies the horizontal alignment of text in an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BackgroundColor">
            <summary>
            The background-color property sets the background color of an element.
            </summary>
            <remarks>The background of an element is the total size of the element, including padding and border (but not the margin).</remarks>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BackgroundImage">
            <summary>
            The background-image property sets the background of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Color">
            <summary>
            The color property specifies the color of text.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderColor">
            <summary>
            The border-color property sets the color of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderWidth">
            <summary>
            The border-width property sets the width of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderLeftWidth">
            <summary>
            The border-left-width property sets the width of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderRightWidth">
            <summary>
            The border-right-width property sets the width of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderTopWidth">
            <summary>
            The border-top-width property sets the width of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderBottomWidth">
            <summary>
            The border-bottom-width property sets the width of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderRadius">
            <summary>
            The border-radius property defines the radius of the element's corners.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderStyle">
            <summary>
            The border-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderLeftStyle">
            <summary>
            The border-left-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderRightStyle">
            <summary>
            The border-right-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderTopStyle">
            <summary>
            The border-top-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.BorderBottomStyle">
            <summary>
            The border-bottom-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.StrokeWidth">
            <summary>
            The stroke-width property defines the thickness of a line, text or outline of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Stroke">
            <summary>
            The stroke property defines the color of a line, text or outline of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.GridTemplateRows">
            <summary>
            The grid-template-rows property specifies the number (and the heights) of the rows in a grid layout.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.GridTemplateColumns">
            <summary>
            The grid-template-columns property specifies the number (and the widths) of columns in a grid layout.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.GridColumn">
            <summary>
            The grid-column property specifies a grid item's size and location in a grid layout.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.GridRow">
            <summary>
            The grid-row property specifies a grid item's size and location in a grid layout.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.GridArea">
            <summary>
            The grid-area property specifies a grid item's size and location in a grid layout.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.ZIndex">
            <summary>
            The z-index property specifies the stack order of an element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.WhiteSpace">
            <summary>
            The white-space property specifies how white-space inside an element is handled.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.AllowRepeatedAttributes">
            <summary>
            Gets or sets whether when setting a property the value will replace the previous value or not.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.Item(System.String)">
            <summary>
            Gets the string corresponding to the specified <paramref name="attribute"/>.
            </summary>
            <param name="attribute">The attribute name being queried.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Style.IsEmpty">
            <summary>
            Gets whether any attribute was set.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Style.op_Implicit(System.String)~C1.Blazor.Core.C1Style">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1Style"/>.
            </summary>
            <param name="style">The string specifying the style.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Style.Parse(System.String)">
            <summary>
            Parses a string into a <see cref="T:C1.Blazor.Core.C1Style"/>.
            </summary>
            <param name="style">The string specifying the style</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Style.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLengthKind">
            <summary>
            The kind of <see cref="T:C1.Blazor.Core.C1StyleLength"/>.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthKind.Auto">
            <summary>
            The browser calculates the length.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthKind.MinContent">
            <summary>
            The browser calculates the length based on the content.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthKind.MaxContent">
            <summary>
            The browser calculates the length based on the content.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthKind.Length">
            <summary>
            The length is explicitly specified.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthKind.Inherit">
            <summary>
            The length is inherited from the parent element.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLengthUnit">
            <summary>
            Units that can be used to express a <see cref="T:C1.Blazor.Core.C1StyleLength"/>.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.PX">
            <summary>
            Pixels (1px = 1 / 96th of 1in) 
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.CM">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.MM">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.IN">
            <summary>
            Inches (1in = 96px = 2.54cm) 
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.PT">
            <summary>
            Points (1pt = 1 / 72 of 1in) 
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.PC">
            <summary>
            Picas (1pc = 12 pt)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.EM">
            <summary>
            Relative to the font-size of the element (2em means 2 times the size of the current font)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.EX">
            <summary>
            Relative to the x-height of the current font (rarely used)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.CH">
            <summary>
            Relative to width of the "0" (zero)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.REM">
            <summary>
            Relative to font-size of the root element
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.VW">
            <summary>
            Relative to 1% of the width of the viewport*
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.VH">
            <summary>
            Relative to 1% of the height of the viewport*
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.VMIN">
            <summary>
            Relative to 1% of viewport's* smaller dimension
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.VMAX">
            <summary>
            Relative to 1% of viewport's* larger dimension
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLengthUnit.PERCENTAGE">
             <summary>
            Relative to the parent element
             </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLength">
            <summary>
            Struct that describe a length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.Auto">
            <summary>
            Gets the auto length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.MinContent">
            <summary>
            Gets the min-content length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.MaxContent">
            <summary>
            Gets the max-content length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.FitParent">
            <summary>
            Gets the 100% length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.Inherit">
            <summary>
            Gets the "inherit" length.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.#ctor(System.Double,C1.Blazor.Core.C1StyleLengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLength"/> struct.
            </summary>
            <param name="value">The amount expressed in <paramref name="unit"/>.</param>
            <param name="unit">The unit of the length.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.Kind">
            <summary>
            Gets the kind of length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.Unit">
            <summary>
            Gets the unit in which the length is expressed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.Value">
            <summary>
            Gets the amount of <see cref="P:C1.Blazor.Core.C1StyleLength.Unit"/>.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLength.IsAbsolute">
            <summary>
            Returns whether the length is an absolute distance.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.op_Implicit(System.Double)~C1.Blazor.Core.C1StyleLength">
            <summary>
            Casting operator to convert a double into a <see cref="T:C1.Blazor.Core.C1StyleLength"/>. The unit assigned is pixels.
            </summary>
            <param name="lengthValue">The value of the length in pixels.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.op_Implicit(System.String)~C1.Blazor.Core.C1StyleLength">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleLength"/>.
            </summary>
            <param name="lengthString">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.TryParse(System.String,C1.Blazor.Core.C1StyleLength@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="length"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="length">The returned length.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.Parse(System.String)">
            <summary>
            Parses the text and returns a length.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed length. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.op_Equality(C1.Blazor.Core.C1StyleLength,C1.Blazor.Core.C1StyleLength)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleLength"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLength.op_Inequality(C1.Blazor.Core.C1StyleLength,C1.Blazor.Core.C1StyleLength)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleLength"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleDisplay">
            <summary>
            The display property specifies the display behavior (the type of rendering box) of an element.
            </summary>
            <remarks>
            In HTML, the default display property value is taken from the HTML specifications or from the browser/user default style sheet. The default value in XML is inline, including SVG elements.
            </remarks>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Inline">
            <summary>
            Displays an element as an inline element (like &lt;span&gt;). Any height and width properties will have no effect. This is default.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Block">
            <summary>
            Displays an element as a block element (like &lt;p&gt;). It starts on a new line, and takes up the whole width.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Contents">
            <summary>
            Makes the container disappear, making the child elements children of the element the next level up in the DOM.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Flex">
            <summary>
            Displays an element as a block-level flex container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Grid">
            <summary>
            Displays an element as a block-level grid container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.InlineBlock">
            <summary>
            Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.InlineFlex">
            <summary>
            Displays an element as an inline-level flex container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.InlineGrid">
            <summary>
            Displays an element as an inline-level grid container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.InlineTable">
            <summary>
            The element is displayed as an inline-level table, with no line break before or after the table.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.ListItem">
            <summary>
            Let the element behave like a &lt;li&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.RunIn">
            <summary>
            Element is rendered as block-level or inline element. Depends on context.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.Table">
            <summary>
            Let the element behave like a &lt;table&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableCaption">
            <summary>
            Let the element behave like a &lt;caption&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableColumnGroup">
            <summary>
            Let the element behave like a &lt;colgroup&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableHeaderGroup">
            <summary>
            Let the element behave like a &lt;thead&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableFooterGroup">
            <summary>
            Let the element behave like a &lt;tfoot&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableRowGroup">
            <summary>
            Let the element behave like a &lt;tbody&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableCell">
            <summary>
            Let the element behave like a &lt;td&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableColumn">
            <summary>
            Let the element behave like a &lt;col&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.TableRow">
            <summary>
            Let the element behave like a &lt;tr&gt; element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleDisplay.None">
            <summary>
            The element is completely removed
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StylePosition">
            <summary>
            The position property specifies the type of positioning method used for an element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StylePosition.Static">
            <summary>
            Elements render in order, as they appear in the document flow (Default value).
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StylePosition.Relative">
            <summary>
            The element is positioned relative to its normal position, so "left:20px" adds 20 pixels to the element's LEFT position.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StylePosition.Fixed">
            <summary>
            The element is positioned relative to the browser window.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StylePosition.Absolute">
            <summary>
            The element is positioned relative to its first positioned (not static) ancestor element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StylePosition.Sticky">
            <summary>
            The element is positioned based on the user's scroll position 
            </summary>
            <remarks>
            A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).
            Note: Not supported in IE/Edge 15 or earlier. Supported in Safari from version 6.1 with a -webkit- prefix.
            </remarks>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleJustifyContent">
            <summary>
            The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleJustifyContent.FlexStart">
            <summary>
            Default value. Items are positioned at the beginning of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleJustifyContent.FlexEnd">
            <summary>
            Items are positioned at the end of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleJustifyContent.Center">
            <summary>
            Items are positioned at the center of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleJustifyContent.SpaceBetween">
            <summary>
            Items are positioned with space between the lines.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleJustifyContent.SpaceAround">
            <summary>
            Items are positioned with space before, between, and after the lines.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleAlignItems">
            <summary>
            The align-items property specifies the default alignment for items inside the flexible container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.Stretch">
            <summary>
            Items are stretched to fit the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.Center">
            <summary>
            Items are positioned at the center of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.FlexStart">
            <summary>
            Items are positioned at the beginning of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.FlexEnd">
            <summary>
            Items are positioned at the end of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.Baseline">
            <summary>
            Items are positioned at the baseline of the container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleAlignItems.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleTextAlign">
            <summary>
            The text-align property specifies the horizontal alignment of text in an element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleTextAlign.Left">
            <summary>
            Aligns the text to the left.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleTextAlign.Right">
            <summary>
            Aligns the text to the right.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleTextAlign.Center">
            <summary>
            Centers the text.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleTextAlign.Justify">
            <summary>
            Stretches the lines so that each line has equal width (like in newspapers and magazines)
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleVerticalAlign">
            <summary>
            value of the vertical alignment property.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.BaseLine">
            <summary>
            This is the default value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Top">
            <summary>
            Align the top of the element and its descendants with the top of the entire line.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Bottom">
            <summary>
             Align the bottom of the element and its descendants with the bottom of the entire line.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Middle">
            <summary>
            Aligns the middle of the element with the middle of lowercase letters in the parent.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.TextTop">
            <summary>
            Aligns the top of the element with the top of the parent element’s font.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.TextBottom">
            <summary>
            Aligns the bottom of the element with the bottom of the parent element’s font.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Sub">
            <summary>
            Aligns the baseline of the element with the subscript-baseline of its parent.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Super">
            <summary>
            Aligns the baseline of the element with the superscript-baseline of its parent.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleVerticalAlign.Length">
            <summary>
            Aligns the baseline of the element at the given length above the baseline of its parent.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleBorderStyle">
            <summary>
            The border-style property sets the style of an element's four borders.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.None">
            <summary>
            Default value. Specifies no border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Hidden">
            <summary>
            The same as "none", except in border conflict resolution for table elements.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Dotted">
            <summary>
            Specifies a dotted border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Dashed">
            <summary>
            Specifies a dashed border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Solid">
            <summary>
            Specifies a solid border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Double">
            <summary>
            Specifies a double border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Groove">
            <summary>
            Specifies a 3D grooved border. The effect depends on the border-color value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Ridge">
            <summary>
            Specifies a 3D ridged border. The effect depends on the border-color value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Inset">
            <summary>
            Specifies a 3D inset border. The effect depends on the border-color value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBorderStyle.Outset">
            <summary>
            Specifies a 3D outset border. The effect depends on the border-color value.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleGridSpan">
            <summary>
            Struct that describe a span used in grid layout.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/> struct.
            </summary>
            <param name="index"></param>
            <param name="span"></param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridSpan.Index">
            <summary>
            Gets the index of the span.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridSpan.Span">
            <summary>
            Gets how many position spans.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.op_Implicit(System.Int32)~C1.Blazor.Core.C1StyleGridSpan">
            <summary>
            Casting operator to convert an integer into a <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/>.
            </summary>
            <param name="index">The index of the span.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.op_Implicit(System.String)~C1.Blazor.Core.C1StyleGridSpan">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/>.
            </summary>
            <param name="spanString">The string specifying the grid span.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.TryParse(System.String,C1.Blazor.Core.C1StyleGridSpan@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="span"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="span">The returned span.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.Parse(System.String)">
            <summary>
            Parses the text and returns a span.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed span. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.op_Equality(C1.Blazor.Core.C1StyleGridSpan,C1.Blazor.Core.C1StyleGridSpan)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridSpan.op_Inequality(C1.Blazor.Core.C1StyleGridSpan,C1.Blazor.Core.C1StyleGridSpan)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleGridArea">
            <summary>
            Struct that specifies a grid item's size and location in a grid layout.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleGridArea"/> struct.
            </summary>
            <param name="row">The row where the area starts.</param>
            <param name="column">The column where the area starts.</param>
            <param name="rowSpan">The number of rows the area extends.</param>
            <param name="columnSpan">The number of columns the area extends.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleGridArea"/> struct.
            </summary>
            <param name="itemName">Specifies a name for the grid item.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridArea.Row">
            <summary>
            Gets the index of the span.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridArea.Column">
            <summary>
            Gets the index of the span.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridArea.RowSpan">
            <summary>
            Gets the index of the span.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridArea.ColumnSpan">
            <summary>
            Gets the index of the span.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGridArea.ItemName">
            <summary>
            Gets how many position spans.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.op_Implicit(System.String)~C1.Blazor.Core.C1StyleGridArea">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleGridSpan"/>.
            </summary>
            <param name="areaString">The string specifying the grid area.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.TryParse(System.String,C1.Blazor.Core.C1StyleGridArea@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="span"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="span">The returned span.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.Parse(System.String)">
            <summary>
            Parses the text and returns a span.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed span. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.op_Equality(C1.Blazor.Core.C1StyleGridArea,C1.Blazor.Core.C1StyleGridArea)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleGridArea"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGridArea.op_Inequality(C1.Blazor.Core.C1StyleGridArea,C1.Blazor.Core.C1StyleGridArea)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleGridArea"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleWhiteSpace">
            <summary>
            The white-space property specifies how white-space inside an element is handled.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleWhiteSpace.Normal">
            <summary>
            Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleWhiteSpace.NoWrap">
            <summary>
            Sequences of whitespace will collapse into a single whitespace. Text will never wrap to the next line. The text continues on the same line until a &lt;br&gt; tag is encountered
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleWhiteSpace.Pre">
            <summary>
            Whitespace is preserved by the browser. Text will only wrap on line breaks. Acts like the &lt;pre&gt; tag in HTML.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleWhiteSpace.PreLine">
            <summary>
            Sequences of whitespace will collapse into a single whitespace. Text will wrap when necessary, and on line breaks.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleWhiteSpace.PreWrap">
            <summary>
            Whitespace is preserved by the browser. Text will wrap when necessary, and on line breaks.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleFontSizeKind">
            <summary>
            The align-items property specifies the default alignment for items inside the flexible container.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Medium">
            <summary>
            Sets the font-size to a medium size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Small">
            <summary>
            Sets the font-size to a small size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.XSmall">
            <summary>
            Sets the font-size to a x-small size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.XXSmall">
            <summary>
            Sets the font-size to a xx-small size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Large">
            <summary>
            Sets the font-size to a large size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.XLarge">
            <summary>
            Sets the font-size to an extra large size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.XXLarge">
            <summary>
            Sets the font-size to an xx-large size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Smaller">
            <summary>
            Sets the font-size to a smaller size than the parent element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Larger">
            <summary>
            Sets the font-size to a larger size than the parent element.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Length">
            <summary>
            Sets the font-size to a size in px, cm, etc.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontSizeKind.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleFontSize">
            <summary>
            Struct that describe a font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Medium">
            <summary>
            Gets the medium font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Small">
            <summary>
            Gets the small font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.XSmall">
            <summary>
            Gets the x-small font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.XXSmall">
            <summary>
            Gets the xx-small font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Large">
            <summary>
            Gets the large font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.XLarge">
            <summary>
            Gets the x-large font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.XXLarge">
            <summary>
            Gets the xx-large font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Smaller">
            <summary>
            Gets the smaller font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Larger">
            <summary>
            Gets the larger font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Initial">
            <summary>
            Gets the initial font-size.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Inherit">
            <summary>
            Gets the "inherit" font-size.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.#ctor(C1.Blazor.Core.C1StyleLength)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLength"/> struct.
            </summary>
            <param name="length">The length of the font/size.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Kind">
            <summary>
            Gets the kind of length.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontSize.Length">
            <summary>
            Gets the length of the font-size.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.op_Implicit(System.Double)~C1.Blazor.Core.C1StyleFontSize">
            <summary>
            Casting operator to convert a double into a <see cref="T:C1.Blazor.Core.C1StyleFontSize"/>.
            </summary>
            <param name="lengthValue">The value of the length in pixels.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.op_Implicit(System.String)~C1.Blazor.Core.C1StyleFontSize">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleFontSize"/>.
            </summary>
            <param name="lengthString">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.TryParse(System.String,C1.Blazor.Core.C1StyleFontSize@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="fontSize"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="fontSize">The returned font-size.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.Parse(System.String)">
            <summary>
            Parses the text and returns a length.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed length. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.op_Equality(C1.Blazor.Core.C1StyleFontSize,C1.Blazor.Core.C1StyleFontSize)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleFontSize"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontSize.op_Inequality(C1.Blazor.Core.C1StyleFontSize,C1.Blazor.Core.C1StyleFontSize)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleFontSize"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleFontStyle">
            <summary>
            The font-style property is mostly used to specify italic text.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontStyle.Normal">
            <summary>
            The text is shown normally.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontStyle.Italic">
            <summary>
            The text is shown in italics.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontStyle.Oblique">
            <summary>
            The text is "leaning" (oblique is very similar to italic, but less supported)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontStyle.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleFontStyle.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleFontWeightKind">
            <summary>
            The kind of font-weight.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleFontWeight">
            <summary>
            The font-weight property specifies the weight of a font:
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Normal">
            <summary>
            Defines normal characters.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Bold">
            <summary>
            Defines thick characters
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Bolder">
            <summary>
            Defines thicker characters
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Lighter">
            <summary>
            Defines lighter characters.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Kind">
            <summary>
            Gets the kind of weight.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleFontWeight.Weight">
            <summary>
            Gets the weight of the font.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.op_Implicit(System.Int32)~C1.Blazor.Core.C1StyleFontWeight">
            <summary>
            Casting operator to convert an int into a <see cref="T:C1.Blazor.Core.C1StyleFontWeight"/>.
            </summary>
            <param name="weight">The weight of the font.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.op_Implicit(System.String)~C1.Blazor.Core.C1StyleFontWeight">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleFontWeight"/>.
            </summary>
            <param name="weightString">The string specifying the weight.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.TryParse(System.String,C1.Blazor.Core.C1StyleFontWeight@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="fontWeight"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="fontWeight">The returned font-weight.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.Parse(System.String)">
            <summary>
            Parses the text and returns a weight.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed weight. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.op_Equality(C1.Blazor.Core.C1StyleFontWeight,C1.Blazor.Core.C1StyleFontWeight)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleFontWeight"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleFontWeight.op_Inequality(C1.Blazor.Core.C1StyleFontWeight,C1.Blazor.Core.C1StyleFontWeight)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleFontWeight"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleBackgroundImageKind">
            <summary>
            Kind of background-image.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.None">
            <summary>
            No background image will be displayed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.Url">
            <summary>
            The URL to the image. To specify more than one image, separate the URLs with a comma
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.LinearGradient">
            <summary>
            Sets a linear gradient as the background image. Define at least two colors (top to bottom)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.RadialGradient">
            <summary>
            Sets a radial gradient as the background image. Define at least two colors (center to edges)
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.RepeatingLinearGradient">
            <summary>
            Repeats a linear gradient
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.RepeatingRadialGradient">
            <summary>
            Repeats a radial gradient
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.Initial">
            <summary>
            Sets this property to its default value.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleBackgroundImageKind.Inherit">
            <summary>
            Inherits this property from its parent element.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleBackgroundImage">
            <summary>
            Class that describe a background-image.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleBackgroundImage.None">
            <summary>
            Gets the none background-image.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleBackgroundImage.Initial">
            <summary>
            Gets the initial background-image.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleBackgroundImage.Inherit">
            <summary>
            Gets the inherit background-image.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.#ctor(C1.Blazor.Core.C1StyleBackgroundImageKind)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLength"/> struct.
            </summary>
            <param name="kind">The kind of background.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleBackgroundImage.Kind">
            <summary>
            Gets the kind of background-image.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.op_Implicit(System.String)~C1.Blazor.Core.C1StyleBackgroundImage">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleFontSize"/>.
            </summary>
            <param name="backgroundString">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.TryParse(System.String,C1.Blazor.Core.C1StyleBackgroundImage@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="backgroundImage"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="backgroundImage">The returned background-image.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.Parse(System.String)">
            <summary>
            Parses the text and returns a background-image.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed background-image. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.op_Equality(C1.Blazor.Core.C1StyleBackgroundImage,C1.Blazor.Core.C1StyleBackgroundImage)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleBackgroundImage"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleBackgroundImage.op_Inequality(C1.Blazor.Core.C1StyleBackgroundImage,C1.Blazor.Core.C1StyleBackgroundImage)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleBackgroundImage"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLinearGradient">
            <summary>
            Background image that is a linear gradient.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradient.#ctor(C1.Blazor.Core.C1StyleLinearGradientDirection,System.Collections.Generic.IReadOnlyCollection{C1.Blazor.Core.C1StyleGradientStop},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLinearGradient"/> struct.
            </summary>
            <param name="direction">The direction of the gradient.</param>
            <param name="gradientStops">The gradient stops.</param>
            <param name="repeating">When set to true the gradient repeats.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradient.Repeating">
            <summary>
            Gets whether the pattern repeats.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradient.Direction">
            <summary>
            Gets the direction of the gradient.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradient.GradientStops">
            <summary>
            Gets the gradient stops.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleGradientStop">
            <summary>
            Gradient color stop.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleGradientStop.#ctor(System.Nullable{C1.Blazor.Core.C1StyleLength},C1.Blazor.Core.C1Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleGradientStop"/> struct.
            </summary>
            <param name="offset">The offset of the gradient stop.</param>
            <param name="color">The color of the gradient stop.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGradientStop.Offset">
            <summary>
            Gets the offset of the gradient stop.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleGradientStop.Color">
            <summary>
            Gets the color of the gradient stop.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLinearGradientDirection">
            <summary>
            Struct that describe a linear gradient direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Top">
            <summary>
            Gets the top direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.TopRight">
            <summary>
            Gets the top-right direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Right">
            <summary>
            Gets the right direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.BottomRight">
            <summary>
            Gets the bottom-right direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Bottom">
            <summary>
            Gets the bottom direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.BottomLeft">
            <summary>
            Gets the bottom left direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Left">
            <summary>
            Gets the left direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.TopLeft">
            <summary>
            Gets the top-left direction.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/> struct.
            </summary>
            <param name="angle">The angle of the gradient in degrees.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Kind">
            <summary>
            Gets the kind of direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleLinearGradientDirection.Angle">
            <summary>
            Gets the angle in degrees.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.op_Implicit(System.Double)~C1.Blazor.Core.C1StyleLinearGradientDirection">
            <summary>
            Casting operator to convert a double into a <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/>. The unit assigned is pixels.
            </summary>
            <param name="lengthValue">The value of the length in pixels.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.op_Implicit(System.String)~C1.Blazor.Core.C1StyleLinearGradientDirection">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/>.
            </summary>
            <param name="lengthString">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.TryParse(System.String,C1.Blazor.Core.C1StyleLinearGradientDirection@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="direction"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="direction">The returned length.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.Parse(System.String)">
            <summary>
            Parses the text and returns a length.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed length. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.op_Equality(C1.Blazor.Core.C1StyleLinearGradientDirection,C1.Blazor.Core.C1StyleLinearGradientDirection)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleLinearGradientDirection.op_Inequality(C1.Blazor.Core.C1StyleLinearGradientDirection,C1.Blazor.Core.C1StyleLinearGradientDirection)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleLinearGradientDirectionKind">
            <summary>
            The different kinds of directions
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.Top">
            <summary>
            Top direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.TopRight">
            <summary>
            Top-right direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.Right">
            <summary>
            Right direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.BottomRight">
            <summary>
            Botttom-right direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.Bottom">
            <summary>
            Bottom direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.BottomLeft">
            <summary>
            Bottom/left direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.Left">
            <summary>
            Left direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.TopLeft">
            <summary>
            Top-left direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleLinearGradientDirectionKind.Degrees">
            <summary>
            Angle expressed in degrees.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleRadialGradient">
            <summary>
            Background image that is a radial gradient.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradient.#ctor(C1.Blazor.Core.C1StyleRadialGradientDefinition,System.Collections.Generic.IReadOnlyCollection{C1.Blazor.Core.C1StyleGradientStop},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLinearGradient"/> struct.
            </summary>
            <param name="definition">The definition of the gradient.</param>
            <param name="gradientStops">The gradient stops.</param>
            <param name="repeating">When set to true the gradient repeats.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradient.Repeating">
            <summary>
            Gets whether the pattern repeats.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradient.Definition">
            <summary>
            Gets the direction of the gradient.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradient.GradientStops">
            <summary>
            Gets the gradient stops.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleRadialGradientShape">
            <summary>
            Defines the shape of a radial gradient.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientShape.Ellipse">
            <summary>
            The shape is an ellipse.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientShape.Circle">
            <summary>
            The shape is a circle.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleRadialGradientSize">
            <summary>
            Defines the size of a radial gradient.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientSize.FarthestCorner">
            <summary>
            The farthest-corner size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientSize.ClosestSide">
            <summary>
            The closest-side size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientSize.ClosestCorner">
            <summary>
            The closest-corner size.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1StyleRadialGradientSize.FarthestSide">
            <summary>
            The farthest-side size.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1StyleRadialGradientDefinition">
            <summary>
            Struct that describe a radial gradient direction.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.#ctor(System.Nullable{C1.Blazor.Core.C1StyleRadialGradientShape},System.Nullable{C1.Blazor.Core.C1StyleRadialGradientSize},System.Nullable{C1.Blazor.Core.C1StyleLength},System.Nullable{C1.Blazor.Core.C1StyleLength})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1StyleLinearGradientDirection"/> struct.
            </summary>
            <param name="shape">The shape of the gradient.</param>
            <param name="size">The size of the gradient.</param>
            <param name="positionX">The x-position of the center.</param>
            <param name="positionY">The y-position of the center.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradientDefinition.Shape">
            <summary>
            Gets the kind of direction.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradientDefinition.Size">
            <summary>
            Gets the size of the radial gradient.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradientDefinition.PositionX">
            <summary>
            Gets the x-position of the center.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1StyleRadialGradientDefinition.PositionY">
            <summary>
            Gets the y-position of the center.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.op_Implicit(System.String)~C1.Blazor.Core.C1StyleRadialGradientDefinition">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1StyleRadialGradientDefinition"/>.
            </summary>
            <param name="radialDefinitionString">The string specifying the radial gradient definition.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.TryParse(System.String,C1.Blazor.Core.C1StyleRadialGradientDefinition@)">
            <summary>
            Tries to parse the specified <paramref name="text"/> and returns the value in the <paramref name="definition"/> parameter.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="definition">The returned length.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.Parse(System.String)">
            <summary>
            Parses the text and returns a length.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The parsed length. If not succeeded returns null.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.op_Equality(C1.Blazor.Core.C1StyleRadialGradientDefinition,C1.Blazor.Core.C1StyleRadialGradientDefinition)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleRadialGradientDefinition"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1StyleRadialGradientDefinition.op_Inequality(C1.Blazor.Core.C1StyleRadialGradientDefinition,C1.Blazor.Core.C1StyleRadialGradientDefinition)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1StyleRadialGradientDefinition"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1ActivityIndicator">
            <summary>
            A visual control used to indicate that something is ongoing.
            </summary>
        </member>
        <member name="E:C1.Blazor.Core.C1ActivityIndicator.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ActivityIndicator.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1Behavior`1">
            <summary>
            Base class for control behaviors.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:C1.Blazor.Core.C1Behavior`1.Attach(`0)">
            <summary>
            Attaches the behavior to a <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.
            </summary>
            <param name="view">The view to which the behavior is attached.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Behavior`1.Detach(`0)">
            <summary>
            Detaches the behavior from the <see cref="T:Microsoft.AspNetCore.Components.ComponentBase"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Behavior`1.OnAttachedTo(`0)">
            <summary>
            Called when the behavior is attached to the control.
            </summary>
            <param name="view">The view to which the behavior is attached.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Behavior`1.OnDetachingFrom(`0)">
            <summary>
            Called before the behavior is detached from the control.
            </summary>
            <param name="view">The view to which the behavior is attached.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Behavior`1.AssociatedObject">
            <summary>
            Gets or sets the associated object.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Border">
            <summary>
            Basic control used to draw a border around another view.
            </summary>
        </member>
        <member name="E:C1.Blazor.Core.C1Border.PropertyChanged">
            <summary>
            Called when a property changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Border.OnPropertyChanged(System.String)">
            <summary>
            Raises <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:C1.Blazor.Core.C1Border.OnBorderAlignmentChanged">
            <summary>
            Called when the border alignment changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Border.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Border"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Border.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1Border.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Blazor.Core.BorderAlignment">
            <summary>
            Determines the way to draw the borders of <see cref="T:C1.Blazor.Core.C1Border"/>.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.BorderAlignment.Inner">
            <summary>
            Draw the borders inside the bound's edges
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.BorderAlignment.Center">
            <summary>
            Draw the borders centering the bound's edges
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.BorderAlignment.Outer">
            <summary>
            Draw the border outer the bound's edges
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Button">
            <summary>
            Button with a built-in style matching the suite.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button._mouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button._pressedBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button._focusBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button._borderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Button"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Button.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1Button.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1Button.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1Button.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Button.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1Button.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Button.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1Button.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Button.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to highlight the focused control.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Button.BorderAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1Button.BorderAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Button.BorderAlignment">
            <summary>
            Gets or sets the alignment of the border relative to the control bounds.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1CornerRadius">
            <summary>
            Describes the thickness of a frame around a rectangle. Four System.Double values describe the C1Thickness.Left, C1Thickness.Top, C1Thickness.Right, and C1Thickness.Bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.#ctor(C1.Blazor.Core.C1CornerValue)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1CornerRadius"/> structure that has the specified uniform corners.
            </summary>
            <param name="uniformLength">The uniform length applied to all four corners of the bounding rectangle.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.#ctor(C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1CornerRadius"/> structure that has specific radius (supplied as a System.Double) applied to each corner of the rectangle.
            </summary>
            <param name="topLeft">The radius for the top-left corner of the rectangle.</param>
            <param name="topRight">The radius for the top-right corner of the rectangle.</param>
            <param name="bottomRight">The radius for the bottom-right corner of the rectangle.</param>
            <param name="bottomLeft">The radius for the bottom-left corner of the rectangle.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.BottomLeft">
            <summary>
            Gets or sets the radius, in pixels, of the bottom-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.TopLeft">
            <summary>
            Gets or sets the radius, in pixels, of the top-left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.BottomRight">
            <summary>
            Gets or sets the radius, in pixels, of the bottom-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.TopRight">
            <summary>
            Gets or sets the radius, in pixels, of the top-right corner of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.IsUniform">
            <summary>
            Gets whether the radius is uniform in all corners and the same.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.IsCircle">
            <summary>
            Gets whether all the corners are a circle radius (They can be different).
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.IsZero">
            <summary>
            Gets whether the radius is zero in all edges.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerRadius.IsAbsolute">
            <summary>
            Gets whether all the corners are represented with absolute lengths.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Equality(C1.Blazor.Core.C1CornerRadius,C1.Blazor.Core.C1CornerRadius)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1CornerRadius"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Inequality(C1.Blazor.Core.C1CornerRadius,C1.Blazor.Core.C1CornerRadius)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1CornerRadius"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Implicit(System.Double)~C1.Blazor.Core.C1CornerRadius">
            <summary>
            Casting operator to convert a double into a uniform <see cref="T:C1.Blazor.Core.C1CornerRadius"/>.
            </summary>
            <param name="uniformLength">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Implicit(C1.Blazor.Core.C1StyleLength)~C1.Blazor.Core.C1CornerRadius">
            <summary>
            Casting operator to convert a <see cref="T:C1.Blazor.Core.C1StyleLength"/> into a uniform <see cref="T:C1.Blazor.Core.C1CornerRadius"/>.
            </summary>
            <param name="uniformLength">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Implicit(C1.Blazor.Core.C1CornerValue)~C1.Blazor.Core.C1CornerRadius">
            <summary>
            Casting operator to convert a <see cref="T:C1.Blazor.Core.C1CornerValue"/> into a uniform <see cref="T:C1.Blazor.Core.C1CornerRadius"/>.
            </summary>
            <param name="uniformLength">The string specifying the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerRadius.op_Implicit(System.ValueTuple{C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue})~C1.Blazor.Core.C1CornerRadius">
            <summary>
            Casting operator to convert a 4-values tuple of <see cref="T:C1.Blazor.Core.C1CornerValue"/> into a <see cref="T:C1.Blazor.Core.C1CornerRadius"/>.
            </summary>
            <param name="cornerValues">The tuple specifying the corner values.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1CornerValue">
            <summary>
            Represents on of the corners.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.#ctor(C1.Blazor.Core.C1StyleLength)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1CornerValue"/> struct.
            </summary>
            <param name="length">The length to create a circle corner.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.#ctor(C1.Blazor.Core.C1StyleLength,C1.Blazor.Core.C1StyleLength)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1CornerValue"/> struct.
            </summary>
            <param name="horizontal">The horizontal corner value.</param>
            <param name="vertical">The vertical corner value.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerValue.Horizontal">
            <summary>
            Gets the horizontal corner value.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerValue.Vertical">
            <summary>
            Gets the vertical corner value.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerValue.IsZero">
            <summary>
            Gets whether the radius is zero.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerValue.IsCircle">
            <summary>
            Gets whether the radius is uniform.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1CornerValue.IsAbsolute">
            <summary>
            Gets a value indicating whether the corner value is represented in absolute lengths.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.op_Implicit(System.Double)~C1.Blazor.Core.C1CornerValue">
            <summary>
            Casting operator to convert a double into a <see cref="T:C1.Blazor.Core.C1CornerValue"/>.
            </summary>
            <param name="length">The value of the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.op_Implicit(C1.Blazor.Core.C1StyleLength)~C1.Blazor.Core.C1CornerValue">
            <summary>
            Casting operator to convert a <see cref="T:C1.Blazor.Core.C1StyleLength"/> into a <see cref="T:C1.Blazor.Core.C1CornerValue"/>.
            </summary>
            <param name="length">The value of the length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.op_Implicit(System.ValueTuple{C1.Blazor.Core.C1StyleLength,C1.Blazor.Core.C1StyleLength})~C1.Blazor.Core.C1CornerValue">
            <summary>
            Casting operator to convert a 2-values tuple of <see cref="T:C1.Blazor.Core.C1StyleLength"/> into a <see cref="T:C1.Blazor.Core.C1CornerValue"/>.
            </summary>
            <param name="cornerValue">The tuple specifying the horizontal and vertical corner values.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.op_Equality(C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1CornerValue"/> structures for equality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1CornerValue.op_Inequality(C1.Blazor.Core.C1CornerValue,C1.Blazor.Core.C1CornerValue)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1CornerValue"/> structures for inequality.
            </summary>
            <param name="c1">The first structure to compare.</param>
            <param name="c2">The other structure to compare.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1ItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl._itemTemplate">
            <summary>
            Gets or sets the template applied to all the items of the list.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl._itemsSource">
            <summary>
            Gets or sets the collection of items that will be shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl._displayMemberPath">
            <summary>
            Gets or sets the name or path of the property that is displayed for each data item.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ItemsControl.Items">
            <summary>
            Gets the collection of items.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ItemsControl.ChildContent">
            <summary>
            Gets or sets the content of the accordion.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ItemsControl.OnItemsSourceChangedProtected(System.Collections.IEnumerable)">
            <summary>
            <see cref="P:C1.Blazor.Core.C1ItemsControl.ItemsSource"/> changed handler.
            </summary>
            <param name="oldValue">Previous value.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1ItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1ItemsControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ItemsControl.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1ItemsControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ItemsControl.ItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ItemsControl.ItemTemplate">
            <summary>
            Gets or sets the template applied to all the items of the list.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ItemsControl.ItemsSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ItemsControl.ItemsSource">
            <summary>
            Gets or sets the collection of items that will be shown.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ItemsControl.DisplayMemberPathProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ItemsControl.DisplayMemberPath"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ItemsControl.DisplayMemberPath">
            <summary>
            Gets or sets the name or path of the property that is displayed for each data item.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1HeaderedItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items which have header and content.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1HeaderedItemsControl._headerTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedItemsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1HeaderedItemsControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedItemsControl.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedItemsControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1HeaderedItemsControl.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets the data template used to display the header.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1HeaderedContentControl">
            <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1HeaderedContentControl"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedContentControl.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1HeaderedContentControl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Blazor.Core.ItemsCollection">
            <summary>
            Collection of items
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.ItemsCollection.#ctor(C1.DataCollection.IDataCollection{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.ItemsCollection"/> class.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:C1.Blazor.Core.IOrderedSet`1">
            <summary>
            Defines methods to manipulate ordered sets.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="P:C1.Blazor.Core.IOrderedSet`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="M:C1.Blazor.Core.IOrderedSet`1.AddRange(`0,`0)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.Blazor.Core.IOrderedSet`1.RemoveRange(`0,`0)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.C1OrderedSet">
            <summary>
            Collection of ordered <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1OrderedSet"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.#ctor(C1.Blazor.Core.C1OrderedSet)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1OrderedSet"/> class.
            </summary>
            <param name="set">The collection whose elements are copied to the new set.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1OrderedSet"/> class.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1OrderedSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Int32"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Add(System.Int32)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Add(C1.Blazor.Core.C1OrderedSet)">
            <summary>
            Joins the specified set.
            </summary>
            <param name="set">The set to join.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Contains(System.Int32)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1OrderedSet.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:C1.Blazor.Core.C1OrderedSet.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Remove(System.Int32)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements.
            </summary>
            <param name="from">From element.</param>
            <param name="to">To element.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Remove(C1.Blazor.Core.C1OrderedSet)">
            <summary>
            Removes the specified items.
            </summary>
            <param name="removedItems">The removed items.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Coalesce">
            <summary>
            Coalesces the ranges.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.Parse(System.String)">
            <summary>
            Parses the text with the format '1-3,5-7,9,13' and returns the <see cref="T:C1.Blazor.Core.C1OrderedSet"/>.
            </summary>
            <param name="text">The text to parse.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.TryParse(System.String,C1.Blazor.Core.C1OrderedSet@)">
            <summary>
            Trys to parse the text with the format '1-3,5-7,9,13' and return the <see cref="T:C1.Blazor.Core.C1OrderedSet"/>.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="orderedSet">The parsed <see cref="T:C1.Blazor.Core.C1OrderedSet"/>.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1OrderedSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:C1.Blazor.Core.C1View">
            <summary>
            Base class for views supporting standard properties.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1View.InitializeAsync">
            <summary>
            This method is called when the component is initialized.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.AwaitInitialized">
            <summary>
            Waits until the component is initialized.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._background">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> used to paint the background.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._foreground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> used to paint the foreground (text and icons).
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._borderBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color"/> used to paint the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._borderThickness">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Thickness"/> of the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._padding">
            <summary>
            Gets or sets the padding of the <see cref="P:Content"/>.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._cornerRadius">
            <summary>
            Gets or sets the <see cref="P:C1.Blazor.Core.C1View.CornerRadius"/> of the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._flowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View._font">
            <summary>
            Gets or sets the font applied to the view.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.IsInitialized">
            <summary>
            Gets whether the component was already initialized.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.IsDisposed">
            <summary>
            Gets whether this control was disposed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Style">
            <summary>
            Gets or sets the style applied to the component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Class">
            <summary>
            Gets or sets the CSS class applied to the component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.TabIndex">
            <summary>
            Gets or sets the CSS class applied to the component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Tag">
            <summary>
            Gets or sets an arbitrary object that can be used to identify a specific component.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Js">
            <summary>
            Gets the JavaScript interoperability instance.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnBackgroundChanged">
            <summary>
            Called when the background changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnForegroundChanged">
            <summary>
            Called when the foreground changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnBorderBrushChanged">
            <summary>
            Called when the border brush changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnBorderThicknessChanged">
            <summary>
            Called when the border thickness changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnCornerRadiusChanged">
            <summary>
            Called when the corner-radius changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnPaddingChanged">
            <summary>
            Called when the padding changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnFlowDirectionChanged">
            <summary>
            Called when the flow direction changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnStyleChanged">
            <summary>
            Called when the style changed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.Focus">
            <summary>
            Sets the focus in the control.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.FocusAsync">
            <summary>
            Sets the focus in the control.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.FocusOutAsync">
            <summary>
            Sets the focus in the control.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1View"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1View.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1View.BackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.Background"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Background">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to paint the background.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.Foreground"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Foreground">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to paint the foreground (text and icons).
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.BorderBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.BorderBrush"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.BorderBrush">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Color" /> used to paint the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.BorderThicknessProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.BorderThickness"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.BorderThickness">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1Thickness" /> of the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.PaddingProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.Padding"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.Padding">
            <summary>
            Gets or sets the padding of the <see cref="P:Content" />.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.CornerRadius">
            <summary>
            Gets or sets the <see cref="T:C1.Blazor.Core.C1CornerRadius" /> of the border.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.FlowDirectionProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.FlowDirection"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.FlowDirection">
            <summary>
            Gets or sets the flow direction.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.FontSize"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.FontSize">
            <summary>
            Gets or sets the font applied to the view.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.FontFamily"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.FontFamily">
            <summary>
            Gets or sets the font applied to the view.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.FontWeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.FontWeight">
            <summary>
            Gets or sets the font applied to the view.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1View.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1View.FontStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1View.FontStyle">
            <summary>
            Gets or sets the font applied to the view.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.DefaultValueConverter">
            <summary>
            Converts a value into a specified type.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.IValueConverter">
            <summary>
            Converts a value into a specified type.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back to the source type.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.PointArrayTypeConverter">
            <summary>
            Converts a string into an array of <see cref="T:C1.Blazor.Core.C1Point"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.PointArrayTypeConverter.Parse(System.String)">
            <summary>
            Parses a string and convert it to an array of points.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.BrushEx">
            <summary>
            Provides access to brushes.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.BrushEx.Cascade(System.Func{C1.Blazor.Core.C1Color}[])">
            <summary>
            Returns the first color different from the default.
            </summary>
            <param name="colors">The list of colors to look up.</param>
        </member>
        <member name="M:C1.Blazor.Core.BrushEx.Blend(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color,System.Double)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">The color to blend onto the <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            ?on top of? <paramref name="backgroundColor"/>.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.DesignTimeEx">
            <summary>
            DesignTime extensions
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Icon">
            <summary>
            Represents a visual icon that can be tinted and resized.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Icon.DEFAULT_WIDTH">
            <summary>
            The default width of an icon.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1Icon.DEFAULT_HEIGHT">
            <summary>
            The default height of an icon.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Icon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Icon"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Icon.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1Icon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:C1.Blazor.Core.C1VectorIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1VectorIcon._viewBox">
            <summary>
            Gets or sets the rectangle (in the path coordinates) which will determine what part will be drawn.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1VectorIcon.UpdateGeometry">
            <summary>
            This will recreate the geometry and update the path.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1VectorIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1VectorIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1VectorIcon.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1VectorIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1VectorIcon.ViewBoxProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1VectorIcon.ViewBox"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1VectorIcon.ViewBox">
            <summary>
            Gets or sets the rectangle (in the path coordinates) which will determine what part will be drawn.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1PathIcon">
            <summary>
            Represent an icon created from a path string.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PathIcon._data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1PathIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1PathIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1PathIcon.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1PathIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1PathIcon.DataProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1PathIcon.Data"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1PathIcon.Data">
            <summary>
            Gets or sets the svg string describing the shape.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1PolygonIcon">
            <summary>
            Represents an icon created from a vector definition.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PolygonIcon._points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PolygonIcon._isClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1PolygonIcon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1PolygonIcon"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1PolygonIcon.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1PolygonIcon.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1PolygonIcon.PointsProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1PolygonIcon.Points"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1PolygonIcon.Points">
            <summary>
            Gets the points that describe the shape.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PolygonIcon.IsClosedProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1PolygonIcon.IsClosed"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1PolygonIcon.IsClosed">
            <summary>
            Gets whether the last point will connect with the first one.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1IconTemplate">
            <summary>
            This factory allows creating <see cref="T:C1.Blazor.Core.C1Icon"/>.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.Close">
            <summary>
            Gets an icon representing a close icon.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.Edit">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.Asterisk">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ArrowUp">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ArrowDown">
            <summary>
            Gets an icon representing an arrow pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ChevronUp">
            <summary>
            Gets an icon representing a chevron pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ChevronDown">
            <summary>
            Gets an icon representing a chevron pointing down.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ChevronLeft">
            <summary>
            Gets an icon representing a chevron pointing to the left.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ChevronRight">
            <summary>
            Gets an icon representing a chevron pointing to the right.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleNorth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleNorthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north east.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing east.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleSouthEast">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south east.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleSouth">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing down.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleSouthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing south west.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing west.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleNorthWest">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing north west.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing upwards.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleRightUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleRight">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the right.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleRightDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to right down.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing downwards.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleLeftDown">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to left down.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleLeft">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to the left.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.TriangleLeftUp">
            <summary>
            Gets an icon representing a triangle with one of the vertices pointing to left up.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.ThreeDotsHorizontal">
            <summary>
            Gets an icon representing three horizontal dots.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.CloseSquare">
            <summary>
            Gets an icon representing close square.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.PlusSquare">
            <summary>
            Gets an icon representing plus square.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.MinusSquare">
            <summary>
            Gets an icon representing plus square.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.Funnel">
            <summary>
            Gets an icon representing a funnel.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1IconTemplate.Star5">
            <summary>
            Gets an icon representing a 5-pointed star.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Point">
            <summary>
            Represents an x- and y-coordinate pair in two-dimensional space. Can also represent a logical point for certain property usages.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Point"/> struct.
            </summary>
            <param name="x">The x-coordinate value of the <see cref="T:C1.Blazor.Core.C1Point"/> structure.</param>
            <param name="y">The y-coordinate value of the <see cref="T:C1.Blazor.Core.C1Point"/> structure.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Point.X">
            <summary>
            Gets or sets the x-coordinate value of this <see cref="T:C1.Blazor.Core.C1Point"/> structure.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:C1.Blazor.Core.C1Point.Y">
            <summary>
            Gets or sets the y-coordinate value of this <see cref="T:C1.Blazor.Core.C1Point"/>.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.op_Equality(C1.Blazor.Core.C1Point,C1.Blazor.Core.C1Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Point.op_Inequality(C1.Blazor.Core.C1Point,C1.Blazor.Core.C1Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:C1.Blazor.Core.C1Rect">
            <summary>
            Describes the width, height, and point origin of a rectangle.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.ToString">
            <summary>
            Gets a string representation of <see cref="T:C1.Blazor.Core.C1Rect"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.#ctor(C1.Blazor.Core.C1Point,C1.Blazor.Core.C1Point)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1Rect"/> structure that is exactly large enough to contain the two specified points.
            </summary>
            <param name="point1">The first point that the new rectangle must contain.</param>
            <param name="point2">The second point that the new rectangle must contain.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.#ctor(C1.Blazor.Core.C1Point,C1.Blazor.Core.C1Size)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1Rect"/> structure based on an origin and size.
            </summary>
            <param name="location">The location.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1Rect"/> structure that has the specified x-coordinate, y-coordinate, width, and height.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Empty">
            <summary>
            Gets a special value that represents a rectangle with no position or area.
            </summary>
            <value>
            The empty rectangle, which has X and Y property values of System.Double.PositiveInfinity, and has Width and Height property values of System.Double.NegativeInfinity.
            </value>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Bottom">
            <summary>
            Gets the y-axis value of the bottom of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.IsEmpty">
            <summary>
            Gets a value that indicates whether the rectangle is the C1Rect.Empty rectangle.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Top">
            <summary>
            Gets the y-axis position of the top of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.X">
            <summary>
            Gets or sets the x-axis value of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Y">
            <summary>
            Gets or sets the y-axis value of the top side of the rectangle.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Offset(System.Double,System.Double)">
            <summary>
            Moves the rectangle by the specified horizontal and vertical amounts. 
            </summary>
            <param name="offsetX">The amount to move the rectangle horizontally.</param>
            <param name="offsetY">The amount to move the rectangle vertically.</param>
            <exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</exception>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Offset(C1.Blazor.Core.C1Rect,System.Double,System.Double)">
            <summary>
            Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts. 
            </summary>
            <param name="rect">The rectangle to move.</param>
            <param name="offsetX">The horizontal offset for the new rectangle.</param>
            <param name="offsetY">The vertical offset for the new rectangle.</param>
            <returns>The resulting rectangle.</returns>
            <exception cref="T:System.InvalidOperationException">
                    <paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</exception>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Contains(C1.Blazor.Core.C1Point)">
            <summary>
            Indicates whether the rectangle described by the C1Rect contains the specified point.
            </summary>
            <param name="point">The point to check.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Contains(C1.Blazor.Core.C1Rect)">
            <summary>
            Indicates whether the rectangle contains the specified rectangle. 
            </summary>
            <param name="rect">The rectangle to check.</param>
            <returns>
                <see langword="true" /> if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.IntersectsWith(C1.Blazor.Core.C1Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle. 
            </summary>
            <param name="rect">The rectangle to check.</param>
            <returns>
                <see langword="true" /> if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Intersect(C1.Blazor.Core.C1Rect)">
            <summary>
            Finds the intersection of the rectangle represented by the C1Rect and the rectangle represented by the specified C1Rect, and stores the result as the current C1Rect.
            </summary>
            <param name="rect">The rectangle to intersect with the current rectangle. </param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Union(C1.Blazor.Core.C1Rect)">
            <summary>
            Expands the rectangle represented by the current C1Rect exactly enough to contain the specified rectangle.
            </summary>
            <param name="rect">The rectangle to include.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Union(C1.Blazor.Core.C1Point)">
            <summary>
            Expands the rectangle represented by the current C1Rect exactly enough to contain the specified point.
            </summary>
            <param name="point">The point to include.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the rectangle that results from expanding the specified rectangle by the specified width and height, in all directions.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Inflate(C1.Blazor.Core.C1Size)">
            <summary>
            Returns the rectangle that results from expanding the specified rectangle by the specified Size, in all directions.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.op_Equality(C1.Blazor.Core.C1Rect,C1.Blazor.Core.C1Rect)">
            <summary>
            Compares two C1Rect structures for equality.
            </summary>
            <param name="rect1">The rect1.</param>
            <param name="rect2">The rect2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.op_Inequality(C1.Blazor.Core.C1Rect,C1.Blazor.Core.C1Rect)">
            <summary>
            Compares two C1Rect structures for inequality.
            </summary>
            <param name="rect1">The rect1.</param>
            <param name="rect2">The rect2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Rect.Union(C1.Blazor.Core.C1Rect,C1.Blazor.Core.C1Rect)">
            <summary>
            Returns a new rectangle exactly enough to contain the specified rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Location">
            <summary>
            Gets or sets the position of the top-left corner of the rectangle.
            </summary>
            <returns>The position of the top-left corner of the rectangle. The default is (0, 0). </returns>
            <exception cref="T:System.InvalidOperationException">
                    <see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
        </member>
        <member name="P:C1.Blazor.Core.C1Rect.Size">
            <summary>
            Gets or sets the width and height of the rectangle. 
            </summary>
            <returns>A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</returns>
            <exception cref="T:System.InvalidOperationException">
                    <see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle. </exception>
        </member>
        <member name="T:C1.Blazor.Core.C1ScrollViewer">
            <summary>
            Represents a scrollable area that can contain other visible elements.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._childContent">
            <summary>
            Gets or sets the content of the scroll viewer.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._topLeftHeader">
            <summary>
            Gets or sets the content of the top, left header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._topHeader">
            <summary>
            Gets or sets the content of the top header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._leftHeader">
            <summary>
            Gets or sets the content of the left header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._horizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer._verticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.HorizontalOffset">
            <summary>
            Gets the distance the content has been scrolled horizontally.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.VerticalOffset">
            <summary>
            Gets the distance the content has been scrolled vertically.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.ViewportHeight">
            <summary>
            Gets the vertical size of the viewable content.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewable content.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.ViewportChanged">
            <summary>
            Gets or sets the callback that is called when the viewport changed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.SizeChanged">
            <summary>
            Gets or sets the callback that is called when the size changed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.IsInServer">
            <summary>
            Gets whether the component is running on the server.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.KeyDown">
            <summary>
            Gets or sets the callback that is called when a key is pressed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.KeyUp">
            <summary>
            Gets or sets the callback that is called when a key is pressed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.Input">
            <summary>
            Gets or sets the callback that is called when input is received.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.JSOnScroll">
            <summary>
            Gets or sets the javascript function that will be run on scroll event.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.PreventDefaultBehaviorKeysList">
            <summary>
            List of keyboard keys that a default browser behavior will be prevented.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.ChangeView(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Scrolls to the specified <paramref name="horizontalOffset"/> and <paramref name="verticalOffset"/> position.
            </summary>
            <param name="horizontalOffset">The offset in the horizontal axe.</param>
            <param name="verticalOffset">The offset in the vertical axe.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.ChangeViewAsync(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Scrolls to the specified <paramref name="horizontalOffset"/> and <paramref name="verticalOffset"/> position.
            </summary>
            <param name="horizontalOffset">The offset in the horizontal axe.</param>
            <param name="verticalOffset">The offset in the vertical axe.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.FocusAsync">
            <summary>
            Sets the focus in the component.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1ScrollViewer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.ChildContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.ChildContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.ChildContent">
            <summary>
            Gets or sets the content of the scroll viewer.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.TopLeftHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.TopLeftHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.TopLeftHeader">
            <summary>
            Gets or sets the content of the top, left header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.TopHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.TopHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.TopHeader">
            <summary>
            Gets or sets the content of the top header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.LeftHeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.LeftHeader"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.LeftHeader">
            <summary>
            Gets or sets the content of the left header.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ScrollViewer.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewer.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1ScrollViewerViewChangingEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.ViewChanging"/> event.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewerViewChangingEventArgs.NextView">
            <summary>
            Gets the view that the <see cref="T:C1.Blazor.Core.C1ScrollViewer"/> will show next.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1ScrollViewerViewChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.ViewChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1ScrollViewerSizeChangedEventArgs">
            <summary>
            Provides event data for the <see cref="E:C1ScrollViewer.SizeChanged"/> event.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1ScrollViewerView">
            <summary>
            Provides a view for a <see cref="T:C1.Blazor.Core.C1ScrollViewer"/> when its view is changing.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewerView.HorizontalOffset">
            <summary>
            Gets the distance the content has been scrolled horizontally.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewerView.VerticalOffset">
            <summary>
            Gets the distance the content has been scrolled vertically.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ScrollViewerView.ZoomFactor">
            <summary>
            Gets a value that indicates the current zoom factor engaged for content scaling.
            </summary>
            <value>
            The current zoom factor engaged for content scaling. The default is 1.0, where 1.0 indicates no additional scaling.
            </value>
        </member>
        <member name="T:C1.Blazor.Core.ScrollBarVisibility">
            <summary>
            Specifies the visibility of a ScrollBar for scrollable content.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.ScrollBarVisibility.Disabled">
            <summary>
            A ScrollBar does not appear even when the
            viewport cannot display all of the content. The dimension of the content is set
            to the corresponding dimension of the ScrollViewer parent.
            For a horizontal ScrollBar, the width of the
            content is set to the ScrollViewer.ViewportWidth of the
            ScrollViewer. For a vertical ScrollBar,
            the height of the content is set to the ScrollViewer.ViewportHeight
            of the ScrollViewer.        
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.ScrollBarVisibility.Auto">
            <summary>
            A ScrollBar appears and the dimension of the
            ScrollViewer is applied to the content when the viewport
            cannot display all of the content. For a horizontal ScrollBar,
            the width of the content is set to the ScrollViewer.ViewportWidth
            of the ScrollViewer. For a vertical ScrollBar,
            the height of the content is set to the ScrollViewer.ViewportHeight
            of the ScrollViewer.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.ScrollBarVisibility.Hidden">
            <summary>
            A ScrollBar does not appear even when the
            viewport cannot display all of the content. The dimension of the ScrollViewer
            is not applied to the content.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.ScrollBarVisibility.Visible">
            <summary>
            A ScrollBar always appears. The dimension
            of the ScrollViewer is applied to the content. For a
            horizontal ScrollBar, the width of the content
            is set to the ScrollViewer.ViewportWidth of the ScrollViewer.
            For a vertical ScrollBar, the height of the
            content is set to the ScrollViewer.ViewportHeight of
            the ScrollViewer.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1Size">
            <summary>
            Describes the width and height of an object.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1Size"/> structure and assigns it an initial width and height.
            </summary>
            <param name="width">The initial width of the instance of <see cref="T:C1.Blazor.Core.C1Size"/>.</param>
            <param name="height">The initial height of the instance of <see cref="T:C1.Blazor.Core.C1Size"/>.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Size.Empty">
            <summary>
            Gets a value that represents a static empty <see cref="T:C1.Blazor.Core.C1Size"/>.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:C1.Blazor.Core.C1Size.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.Equals(System.Object)">
            <summary>
            ompares an object to an instance of <see cref="T:C1.Blazor.Core.C1Size"/> for equality.
            </summary>
            <param name="o">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <remarks>
            To be added.
            </remarks>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.op_Equality(C1.Blazor.Core.C1Size,C1.Blazor.Core.C1Size)">
            <summary>
            Compares two instances of <see cref="T:C1.Blazor.Core.C1Size"/> for equality.
            </summary>
            <param name="size1">The size1.</param>
            <param name="size2">The size2.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Size.op_Inequality(C1.Blazor.Core.C1Size,C1.Blazor.Core.C1Size)">
            <summary>
            Compares two instances of <see cref="T:C1.Blazor.Core.C1Size"/> for inequality.
            </summary>
            <param name="size1">The size1.</param>
            <param name="size2">The size2.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1Thickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four System.Double values describe the C1Thickness.Left, C1Thickness.Top, C1Thickness.Right, and C1Thickness.Bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.#ctor(System.Double)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1Thickness"/> structure that has the specified uniform length on each side.
            </summary>
            <param name="uniformLength">The uniform length applied to all four sides of the bounding rectangle.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a <see cref="T:C1.Blazor.Core.C1Thickness"/> structure that has specific lengths (supplied as a System.Double) applied to each side of the rectangle.
            </summary>
            <param name="left">The thickness for the left side of the rectangle.</param>
            <param name="top">The thickness for the upper side of the rectangle.</param>
            <param name="right">The thickness for the right side of the rectangle.</param>
            <param name="bottom">The thickness for the lower side of the rectangle.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.Bottom">
            <summary>
            Gets or sets the width, in pixels, of the lower side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.Left">
            <summary>
            Gets or sets the width, in pixels, of the left side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.Right">
            <summary>
            Gets or sets the width, in pixels, of the right side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.Top">
            <summary>
            Gets or sets the width, in pixels, of the upper side of the bounding rectangle.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.IsUniform">
            <summary>
            Gets whether the thickness is uniform.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1Thickness.IsZero">
            <summary>
            Gets whether the thickness is zero in all edges.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>
            To be added.
            </remarks>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.op_Equality(C1.Blazor.Core.C1Thickness,C1.Blazor.Core.C1Thickness)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1Thickness"/> structures for equality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.op_Inequality(C1.Blazor.Core.C1Thickness,C1.Blazor.Core.C1Thickness)">
            <summary>
            Compares two <see cref="T:C1.Blazor.Core.C1Thickness"/> structures for inequality.
            </summary>
            <param name="t1">The first structure to compare.</param>
            <param name="t2">The other structure to compare.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.op_Implicit(System.Double)~C1.Blazor.Core.C1Thickness">
            <summary>
            Casting operator to convert a double into a uniform <see cref="T:C1.Blazor.Core.C1Thickness"/>.
            </summary>
            <param name="uniformLength">The double specifying uniform length.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.op_Implicit(System.String)~C1.Blazor.Core.C1Thickness">
            <summary>
            Casting operator to convert a string into a <see cref="T:C1.Blazor.Core.C1Thickness"/>.
            </summary>
            <param name="thicknessString">The string specifying the thickness.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1Thickness.ToString">
            <summary>
            Gets a string representation of <see cref="T:C1.Blazor.Core.C1Thickness"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.C1ToggleButton">
            <summary>
            Represents a button that a user can expand and collapse.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._isChecked">
            <summary>
            Gets or sets whether the <see cref="T:C1.Blazor.Core.C1ToggleButton"/> is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._isFocusable">
            <summary>
            Gets or sets whether the button can receive the focus.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._checkedText">
            <summary>
            Gets or sets the text show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._uncheckedText">
            <summary>
            Gets or sets the text shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._checkedImageSource">
            <summary>
            Gets or sets the image show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._uncheckedImageSource">
            <summary>
            Gets or sets the image shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._checkedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._uncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton._indeterminateContent">
            <summary>
            Gets or sets the content shown when the button is indeterminate.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.IsCheckedChanged">
            <summary>
            Gets or sets the callback called then it is checked.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.OnMouseDown">
            <summary>
            Gets or sets the callback called when mouse-down.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1ToggleButton.OnAfterRender(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:C1.Blazor.Core.C1ToggleButton.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.IsCheckedProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.IsChecked"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.IsChecked">
            <summary>
            Gets or sets whether the <see cref="T:C1.Blazor.Core.C1ToggleButton" /> is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.IsFocusableProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.IsFocusable"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.IsFocusable">
            <summary>
            Gets or sets whether the button can receive the focus.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.CheckedTextProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.CheckedText"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.CheckedText">
            <summary>
            Gets or sets the text show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.UncheckedTextProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.UncheckedText"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.UncheckedText">
            <summary>
            Gets or sets the text shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.CheckedImageSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.CheckedImageSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.CheckedImageSource">
            <summary>
            Gets or sets the image show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.UncheckedImageSourceProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.UncheckedImageSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.UncheckedImageSource">
            <summary>
            Gets or sets the image shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.CheckedContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.CheckedContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.CheckedContent">
            <summary>
            Gets or sets the content show when the button is checked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.UncheckedContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.UncheckedContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.UncheckedContent">
            <summary>
            Gets or sets the content shown when the button is unchecked.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1ToggleButton.IndeterminateContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Blazor.Core.C1ToggleButton.IndeterminateContent"/> dependency property. 
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1ToggleButton.IndeterminateContent">
            <summary>
            Gets or sets the content shown when the button is indeterminate.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.AsyncEventArgs">
            <summary>
            Provides event data for asynchronous events.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.AsyncEventArgs.Awaiter">
            <summary>
            Gets the deferrals awaiter.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgs.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the complete method.
            </remarks>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgs.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.AsyncEventArgsDeferralsAwaiter">
            <summary>
            Deferrals awaiter used to wait for the deferrals of an async event.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgsDeferralsAwaiter.GetDeferral">
            <summary>
            Gets the deferral.
            </summary>
            <remarks>
            The event won't finish until all the deferrals call the complete method.
            </remarks>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgsDeferralsAwaiter.WaitDeferralsAsync">
            <summary>
            Waits until all the deferrals are complete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.AsyncEventArgsDeferral">
            <summary>
            Deferral used to block the event until <see cref="M:C1.Blazor.Core.AsyncEventArgsDeferral.Complete"/> method is called. 
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgsDeferral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.AsyncEventArgsDeferral"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.AsyncEventArgsDeferral.Complete">
            <summary>
            Notifies the event the handler is ready to continue.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.ColorEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.IsDefaultColor(C1.Blazor.Core.C1Color)">
            <summary>
            Determines whether the specified color is the default color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.Cascade(System.Func{C1.Blazor.Core.C1Color}[])">
            <summary>
            Returns the first color different from the default.
            </summary>
            <param name="colors">The list of colors to look up.</param>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the ARGB components.
            </summary>
            <param name="a">The alpha channel.</param>
            <param name="r">The Red component.</param>
            <param name="g">The Green component.</param>
            <param name="b">The Blue component.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.GetArgb(C1.Blazor.Core.C1Color,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Gets the ARGB components of a color.
            </summary>
            <param name="color">The color.</param>
            <param name="a">The alpha channel.</param>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.WithAlpha(C1.Blazor.Core.C1Color,System.Byte)">
            <summary>
            Creates a new color modifying the alpha channel.
            </summary>
            <param name="color">The color.</param>
            <param name="a">a.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.Blend(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color,System.Double)">
            <summary>
            Blends the specified colors together.
            </summary>
            <param name="color">The color to blend onto the <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The background color.</param>
            <param name="amount">How much of <paramref name="color"/> to keep,
            “on top of” <paramref name="backgroundColor"/>.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.BlendWithAlpha(C1.Blazor.Core.C1Color,C1.Blazor.Core.C1Color)">
            <summary>
            Alpha blends the specified colors together.
            </summary>
            <param name="color">The color that stands in the front of <paramref name="backgroundColor"/>.</param>
            <param name="backgroundColor">The color that stands in the back.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.RGBtoHSV(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.HSVtoRGB(System.Single@,System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            r,g,b values are from 0 to 1
            h = [0,360], s = [0,1], v = [0,1]
            if s == 0, then h = -1(undefined)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.GetIntColor(System.Object)">
            <summary>
            Convert color in platforms to a int color.
            </summary>
            <param name="color">Color in each platform.</param>
            <returns>a color defined in a int value.</returns>
        </member>
        <member name="M:C1.Blazor.Core.ColorEx.TryParse(System.String,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Creates a color from an html string.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.DeviceEx">
            <summary>
            Provides information about the device
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.DeviceEx.RuntimePlatform">
            <summary>
            Gets the runtime platform.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.DeviceEx.DeviceType">
            <summary>
            Gets the device type.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.DeviceEx.DeviceOrientation">
            <summary>
            Gets the device orientation.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.DeviceEx.ScreenDensity">
            <summary>
            Gets the screen density.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.DeviceEx.ScreenPPI">
            <summary>
            Gets the number of pixels per inch of the screen.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.DeviceType">
            <summary>
            Indicates which device type the forms are running on.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceType.Phone">
            <summary>
            Indicates that the device is a phone.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceType.Desktop">
            <summary>
            Indicates that the device is desktop.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceType.Other">
            <summary>
            Indicates the type of device is unknown.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.DeviceOrientation">
            <summary>
            Indicates device Orientation.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceOrientation.Undefined">
            <summary>
            Indicates device Orientation is Undefined.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceOrientation.Landscape">
            <summary>
            Indicates device Orientation is Landscape.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.DeviceOrientation.Portrait">
            <summary>
            Indicates device Orientation is Portrait.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.DoubleEx.EqualsOrBothNanOrInfinity(System.Double,System.Double)">
            <summary>
            Returns true when both numbers are equal or both are Nan or both are PositiveInfinity or both are NegativeInfinity.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
        </member>
        <member name="M:C1.Blazor.Core.ExpressionEx.CreateBindingFunction(System.Type,System.String)">
            <summary>
            Creates a compiled function to access the property specified by the <paramref name="bindingPath"/> of the <paramref name="itemType"/>.
            </summary>
            <param name="itemType">The type of the items.</param>
            <param name="bindingPath">The property path</param>
        </member>
        <member name="T:C1.Blazor.Core.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Extensions.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@,System.Numerics.Matrix3x2@)">
            <summary>
            Multiplies the left matrix by the right matrix,
            returns the resulting matrix in the output parameter.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <param name="result">The product of multiplying the two matrices.</param>
        </member>
        <member name="M:C1.Blazor.Core.Extensions.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
            <summary>
            Multiplies the left matrix by the right matrix.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The matrix to multiply the left by (the right matrix in the multiplication).</param>
            <returns>The product of multiplying the two matrices.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Extensions.Transform(System.Numerics.Matrix3x2,System.Double,System.Double)">
            <summary>
            Transforms a point by this matrix.
            </summary>
            <param name="matrix">The Matrix defining transformation.</param>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>The result of the transformation for the point.</returns>
        </member>
        <member name="M:C1.Blazor.Core.ObjectEx.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.Blazor.Core.ObjectEx.SetPropertyValue``1(System.Object,System.String,``0,C1.Blazor.Core.IValueConverter,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Sets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T">Type of the property to set.</typeparam>
            <param name="target">Object that contains the property.</param>
            <param name="path">Name or path of the property that contains the value.</param>
            <param name="value">New value for the property.</param>
            <param name="converter">Converter to use when setting the property.</param>
            <param name="converterParameter">Parameter passed to the converter.</param>
            <param name="culture">Culture information to use when converting values.</param>
        </member>
        <member name="M:C1.Blazor.Core.RectEx.Deflate(C1.Blazor.Core.C1Rect@,C1.Blazor.Core.C1Thickness)">
            <summary>
            Deflates a <see cref="T:C1.Blazor.Core.C1Rect"/> structure by specified amount.
            </summary>
            <param name="rect"><see cref="T:C1.Blazor.Core.C1Rect"/> structure.</param>
            <param name="th"><see cref="T:C1.Blazor.Core.C1Thickness"/> structure defining amount to inflate this <see cref="T:C1.Blazor.Core.C1Rect"/>.</param>
        </member>
        <member name="M:C1.Blazor.Core.RectEx.Union(C1.Blazor.Core.C1Rect,C1.Blazor.Core.C1Rect)">
            <summary>
            Returns a new rectangle exactly enough to contain the specified rectangles.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.StringEx.SplitCamel(System.String,System.Boolean)">
            <summary>
            Insert spaces between words identified by the camel nomenclature.
            </summary>
            <param name="s">The original string.</param>
            <param name="capitalizeFirst">When set to true the resulting string will have its first word capitalized despite the original string capitalization.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.ThemeEx">
            <summary>
            Provides access to system colors according to the current theme.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.IsDark">
            <summary>
            Gets a value indicating whether the app is using a dark theme.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.DisabledBackgroundBrush">
            <summary>
            Gets the disabled color of the theme background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.DisabledTextBrush">
            <summary>
            Gets the disabled color of the theme background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.BackgroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.ForegroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme foreground.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.AccentBackground">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> accent background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.AccentForeground">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> accent foreground.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.SelectionBackgroundBrush">
            <summary>
            Gets the selection background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.SelectionForegroundBrush">
            <summary>
            Gets the selection foreground.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.CursorBackgroundBrush">
            <summary>
            Gets the cursor background.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.CursorForegroundBrush">
            <summary>
            Gets the cursor foreground.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.EditorBackgroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme used to pain the background of the editors.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.EditorForegroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme used to pain the foreground of the editors.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.HeaderBackgroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme used to pain the headers.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.HeaderForegroundBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme used to pain the headers foreground.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.ThemeEx.BorderBrush">
            <summary>
            Gets the <see cref="T:C1.Blazor.Core.C1Color"/> of the theme used to pain the borders.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.TypeEx">
            <summary>
            The <see cref="T:C1.Blazor.Core.TypeEx"/> class provides useful extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.New(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.GetDefaultPublicCtor(System.Type)">
            <summary>
            Returns default public instance parameter-less constructor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The default constructor for the specified type if it exists; Null otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then returns double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.GetMinValue(System.Type)">
            <summary>
            Gets the MinValue of a type.
            </summary>
            <param name="type">Type.</param>
            <returns>Double.NaN if the MinValue property doesn't exist, a specific double value if property exists.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.GetMaxValue(System.Type)">
            <summary>
            Gets the MaxValue of a type.
            </summary>
            <param name="type">Type.</param>
            <returns>Double.NaN if the MinValue property doesn't exist, a specific double value if property exists.</returns>
        </member>
        <member name="M:C1.Blazor.Core.TypeEx.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="T:C1.Blazor.Core.C1InputEventArgs">
            <summary>
            Contains information about gesture events.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.#ctor(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1InputEventArgs"/> class.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs">
            <summary>
            Gets the arguments of the original event which raised this event.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1InputEventArgs.Handled">
            <summary>
            Gets or sets a value that marks the routed event as handled. Setting to true
            prevents most handlers along the event route from handling the same event again.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1InputEventArgs.PointerDeviceType">
            <summary>
            Gets the type of pointer which performed the action.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.GetPosition(Microsoft.AspNetCore.Components.ComponentBase)">
            <summary>
            Gets the position of the pointer performing the drag gesture relatively to the specified element.
            </summary>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Blazor.Core.C1InputEventArgs.IsShiftPressed">
            <summary>
            Gets whether shift key is pressed.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1InputEventArgs.IsCtrlPressed">
            <summary>
            Gets whether ctrl key is pressed.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.GetPosition(Microsoft.AspNetCore.Components.Web.MouseEventArgs,Microsoft.AspNetCore.Components.ComponentBase)">
            <summary>
            Gets the position of the pointer or finger.
            </summary>
            <param name="args">The <see cref="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs" /> instance containing the manipulation data.</param>
            <param name="relativeTo">Any visual object that is connected to the same object tree. To specify the object relative to the overall coordinate system, use a relativeTo value of null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.GetPointerType(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Gets the type of the pointer.
            </summary>
            <param name="originalArgs">The <see cref="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.GetIsHandled(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Gets a value indicating whether the specified event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.SetIsHandled(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Boolean)">
            <summary>
            Sets whether the event is handled.
            </summary>
            <param name="e">The <see cref="P:C1.Blazor.Core.C1InputEventArgs.OriginalEventArgs"/> instance containing the event data.</param>
            <param name="handled"><c>true</c> if the event is handled.</param>
        </member>
        <member name="M:C1.Blazor.Core.C1InputEventArgs.HitTest``1(System.Double)">
            <summary>
            Returns the first visual element which is hit by this event.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:C1.Blazor.Core.C1PointerDeviceType">
            <summary>
            Enumerates the different kind of devices which can perform drag operations.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PointerDeviceType.Mouse">
            <summary>
            Mouse device
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PointerDeviceType.Touch">
            <summary>
            Touch screen
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1PointerDeviceType.Pen">
            <summary>
            Pen device
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1TappedEventArgs">
            <summary>
            Contains information of the tap events.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1TappedEventArgs.#ctor(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.C1TappedEventArgs" /> class.
            </summary>
            <param name="originalArgs">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs" /> instance containing the event data.</param>
            <param name="isRightTapped">if set to <c>true</c> the event was performed with the right button of the mouse.</param>
            <param name="isDown">if set to <c>true</c> the event was performed with the mouse down.</param>
            <param name="isBarrelButtonDown">if set to <c>true</c> the barrel button of the pen is pressed.</param>
        </member>
        <member name="P:C1.Blazor.Core.C1TappedEventArgs.IsRightTapped">
            <summary>
            Gets a value indicating whether the event is performed with the right button of the mouse.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1TappedEventArgs.IsDown">
            <summary>
            Gets a value indicating whether the event is performed with the mouse down.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.C1TappedEventArgs.IsBarrelButtonDown">
            <summary>
            Gets a value indicating whether the barrel button of the pen is pressed.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.C1LicensedControlAttribute">
            <summary>
            Marks a control class that must depend on C1 license
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.C1LicensedControlAttribute.#ctor">
            <summary>
            Constructs an entity of C1LicensedControlAttribute
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.LicenseManager">
            <summary>
            Allows the users to set a license in the <see cref="P:Key"/> property.
            </summary>
            <remarks>
            See https://www.grapecity.com/licensing/componentone for more information.
            </remarks>
        </member>
        <member name="T:C1.Blazor.Core.DependencyProperty">
            <summary>
            Class used to store property values.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.IDependencyObject">
            <summary>
            Stub interface to have cross-platform compatibility.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.Range`1">
            <summary>
            Represents a range of items.
            </summary>
            <typeparam name="T">The range type.</typeparam>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.#ctor(`0,`0)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
        </member>
        <member name="P:C1.Blazor.Core.Range`1.LowerBound">
            <summary>
            The start of the range.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.Range`1.UpperBound">
            <summary>
            The upper bound of the range.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.Range`1.Length">
            <summary>
            Return length of range
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Contains(`0)">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">The value to look for.</param>
            <returns>true if the range contains <code>value</code>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Contains(C1.Blazor.Core.Range{`0})">
            <summary>
            Indicates if the range contains <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.IsContainedBy(C1.Blazor.Core.Range{`0})">
            <summary>
            Indicates if the range is contained by <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if the entire range is within <code>value</code>.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Overlaps(C1.Blazor.Core.Range{`0})">
            <summary>
            Indicates if the range overlaps <code>value</code>.
            </summary>
            <param name="value">A range to test.</param>
            <returns>true if any of the range in <code>value</code> is within this range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Intersect(C1.Blazor.Core.Range{`0})">
            <summary>
            Returns the range that represents the intersection of this range and <code>value</code>.
            </summary>
            <param name="value">The range to intersect with.</param>
            <returns>A range that contains the values that are common in both ranges, or null if there is no intersection.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> does not overlap the range.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Union(C1.Blazor.Core.Range{`0})">
            <summary>
            Returns the range that represents the union of this range and <code>value</code>.
            </summary>
            <param name="value">The range to union with.</param>
            <returns>A range that contains both ranges, or null if there is no union.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>value</code> is not contiguous with the range.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Complement(C1.Blazor.Core.Range{`0})">
            <summary>
            Returns a range which contains the current range, minus <code>value</code>.
            </summary>
            <param name="value">The value to complement the range by.</param>
            <returns>The complemented range.</returns>
            <exception cref="T:System.ArgumentNullException"><code>value</code> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <code>value</code> is contained by this range, complementing would lead to a split range.
            </exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Substract(C1.Blazor.Core.Range{`0},System.Func{`0,`0},System.Func{`0,`0})">
            <summary>
            Returns the result of subtracting a range to the current one. This could lead to a split range
            in case the one that is being subtracted is contained in the current one.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Join(C1.Blazor.Core.Range{`0},System.Func{`0,`0})">
            <summary>
            Return new range which joined by value with this range
            </summary>
            <param name="value"></param>
            <param name="incrementor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.IsJoinableWith(C1.Blazor.Core.Range{`0},System.Func{`0,`0})">
            <summary>
            Check value is join with this range
            </summary>
            <param name="value"></param>
            <param name="incrementor"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Split(`0)">
            <summary>
            Splits the range into two.
            </summary>
            <param name="position">The position to split the range at.</param>
            <returns>The split ranges.</returns>
            <exception cref="T:System.ArgumentNullException"><code>position</code> is null.</exception>
            <exception cref="T:System.ArgumentException"><code>position</code> is not contained within the range.</exception>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Iterate(System.Func{`0,`0})">
            <summary>
            Iterates the range.
            </summary>
            <param name="incrementor">A function which takes a value, and returns the next value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.ReverseIterate(System.Func{`0,`0})">
            <summary>
            Iterates the range in reverse.
            </summary>
            <param name="decrementor">A function which takes a value, and returns the previous value.</param>
            <returns>The items in the range.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.IsContiguousWith(C1.Blazor.Core.Range{`0})">
            <summary>
            Indicates if this range is contiguous with <code>range</code>.
            </summary>
            <param name="range">The range to check.</param>
            <returns>true if the two ranges are contiguous, false otherwise.</returns>
            <remarks>Contiguous can mean containing, overlapping, or being next to.</remarks>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.ToString">
            <summary>
            See <see cref="M:System.Object.ToString"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.Equals(System.Object)">
            <summary>
            See <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.GetHashCode">
            <summary>
            See <see cref="M:System.Object.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_Equality(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_Inequality(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the not equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the two ranges are equal, false otherwise.</returns>
            <summary>
            Overrides the equals operator.
            </summary>
            <returns>true if the two ranges are equal, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_GreaterThan(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_LessThan(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_GreaterThan(C1.Blazor.Core.Range{`0},`0)">
            <summary>
            Overrides the greater than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_LessThan(C1.Blazor.Core.Range{`0},`0)">
            <summary>
            Overrides the less than operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_GreaterThanOrEqual(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the greater than or equal operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_LessThanOrEqual(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            Overrides the less than or equal to operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_GreaterThanOrEqual(C1.Blazor.Core.Range{`0},`0)">
            <summary>
            Overrides the greater than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is greater than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_LessThanOrEqual(C1.Blazor.Core.Range{`0},`0)">
            <summary>
            Overrides the less than or equals operator.
            </summary>
            <param name="left">The left range.</param>
            <param name="right">The right range.</param>
            <returns>true if the <code>left</code> is less than or equal to <code>right</code>, false otherwise.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_ExclusiveOr(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            The complement operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The complement of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_BitwiseOr(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            The union operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The union of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.op_BitwiseAnd(C1.Blazor.Core.Range{`0},C1.Blazor.Core.Range{`0})">
            <summary>
            The intersection operator.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>The intersection of <code>left</code> and <code>right</code>.</returns>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.CompareTo(C1.Blazor.Core.Range{`0})">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.CompareTo(`0)">
            <summary>
            See <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.Range`1.CompareTo(System.Object)">
            <summary>
            See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.Range`2">
            <summary>
            Represents a range of items, with an associated value.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:C1.Blazor.Core.Range`2.#ctor(`0,`0,`1)">
            <summary>
            Creates the range.
            </summary>
            <param name="lowerBound">The lower bound of the range.</param>
            <param name="upperBound">The upper bound of the range.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:C1.Blazor.Core.Range`2.Value">
            <summary>
            The value for the range.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.RangeArray`1">
            <summary>
            Represents a range of array items, with an associated value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:C1.Blazor.Core.RangeArray`1.#ctor(System.Int32,`0[])">
            <summary>
            Creates the range.
            </summary>
            <param name="startIndex">The start index.</param>
            <param name="values">The values.</param>
        </member>
        <member name="P:C1.Blazor.Core.RangeArray`1.Values">
            <summary>
            The values for the range.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.RangeAssert">
            <summary>
            Provides access to assertion functions.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.IsFalse(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is fase.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is true.</exception>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.IsTrue(System.String,System.Boolean)">
            <summary>
            Asserts that a condition is true.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="condition">The condition result.</param>
            <exception cref="T:System.ArgumentException">If <code>condition</code> is false.</exception>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotNull(System.String,System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="paramName">The name of the parameter to RangeAssert.</param>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotNull(System.Object)">
            <summary>
            Asserts that <code>value</code> is not null.
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:System.ArgumentNullException">If <code>value</code> is null.</exception>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty(System.String,System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty(System.String)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty(System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty(System.String,System.String,System.Boolean)">
            <summary>
            Asserts that <code>value</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="value">The value to test.</param>
            <param name="trim">Whether to trim the string before checking it.</param>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty``1(``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="values">The values to test.</param>
        </member>
        <member name="M:C1.Blazor.Core.RangeAssert.NotEmpty``1(System.String,``0[])">
            <summary>
            Asserts that <code>values</code> is not empty.
            </summary>
            <param name="paramName">The parameter name.</param>
            <param name="values">The values to test.</param>
        </member>
        <member name="T:C1.Blazor.Core.C1SelectionMode">
            <summary>
            Defines the selection behavior for a control which supports the SelectionMode
            property like C1treeView. 
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1SelectionMode.None">
            <summary>
            The user can not select any item.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1SelectionMode.Single">
            <summary>
            The user can select only one item at a time. 
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1SelectionMode.Multiple">
            <summary>
            The user can select multiple items without holding down a modifier key.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.C1SelectionMode.Extended">
            <summary>
            The user can select multiple consecutive items while holding down the corresponding modifier key.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.SelectionChangedEventArgs`1">
            <summary>
            Provides data for the SelectionChanged event.
            </summary>
        </member>
        <member name="M:C1.Blazor.Core.SelectionChangedEventArgs`1.#ctor(C1.Blazor.Core.IOrderedSet{`0},C1.Blazor.Core.IOrderedSet{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Blazor.Core.SelectionChangedEventArgs`1"/> class.
            </summary>
            <param name="addedItems">The added items.</param>
            <param name="removedItems">The removed items.</param>
        </member>
        <member name="P:C1.Blazor.Core.SelectionChangedEventArgs`1.AddedItems">
            <summary>
            Gets a collection which contains the items that were selected.
            </summary>
            <value>The items that were selected in this event.</value>
        </member>
        <member name="P:C1.Blazor.Core.SelectionChangedEventArgs`1.RemovedItems">
            <summary>
            Gets a collection which contains the items that were unselected.
            </summary>
            <value>The items that were unselected in this event.</value>
        </member>
        <member name="M:C1.Blazor.Core.DateTimeEx.FromOADate(System.Double)">
            <summary>
            Returns a System.DateTime equivalent to the specified OLE Automation date.
            </summary>
            <param name="d">An OLE Automation date value.</param>
            <returns>An object that represents the same date and time as the d parameter.</returns>
        </member>
        <member name="M:C1.Blazor.Core.DateTimeEx.ToOADate(System.DateTime)">
            <summary>
            Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <param name="date">The date that will be converted</param>
            <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        </member>
        <member name="T:C1.Blazor.Core.FlowDirection">
            <summary>
            Flow Direction mode.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.FlowDirection.Default">
            <summary>
            Indicates that content should flow from left to right in default
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.FlowDirection.LeftToRight">
            <summary> 	
            Indicates that content should flow from left to right.
            </summary>
        </member>
        <member name="F:C1.Blazor.Core.FlowDirection.RightToLeft">
            <summary>
            Indicates that content should flow from right to left.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.PropertyChangedEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.PropertyChangedEventArgs`1.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.PropertyChangedEventArgs`1.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="T:C1.Blazor.Core.PropertyChangingEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanging events.
            </summary>
        </member>
        <member name="P:C1.Blazor.Core.PropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Blazor.Core.PropertyChangingEventArgs`1"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.Name">
            <summary>
            Gets or sets the name of the state that the control can be in.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.GroupName">
            <summary>
            Gets or sets the name of the group that the state belongs to.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1VisualStateAttribute.Condition">
            <summary>
            Gets or sets the condition to meet this visual state.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1TemplatePartAttribute.Name">
            <summary>
            Gets or sets the name of the template part.
            </summary>
        </member>
        <member name="P:C1.CodeGeneration.C1TemplatePartAttribute.Type">
            <summary>
            Gets or sets the type of the template part.
            </summary>
        </member>
        <member name="T:GrapeCity.Common.Cryptography.Sha256">
            <summary>
            Sha256Managed
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Cryptography.Sha256.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GrapeCity.Common.Cryptography.Sha256.ComputeHash(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
    </members>
</doc>
