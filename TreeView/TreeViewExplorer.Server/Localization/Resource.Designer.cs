//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TreeViewExplorer.Server.Localization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TreeViewExplorer.Server.Localization.Resource", typeof(Resource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to About.
        /// </summary>
        public static string About {
            get {
                return ResourceManager.GetString("About", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accordion Tree.
        /// </summary>
        public static string Accordion_Tree {
            get {
                return ResourceManager.GetString("Accordion_Tree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accordions are multi-pane panels that keep only one panel expanded at a time. They are commonly used for navigation. You can use the C1TreeView control to implement accordions. This sample creates an Accordion using the C1TreeView and CSS by customizing the header display..
        /// </summary>
        public static string AccordionTreesDescription {
            get {
                return ResourceManager.GetString("AccordionTreesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding.
        /// </summary>
        public static string Adding {
            get {
                return ResourceManager.GetString("Adding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Node for Bound TreeView.
        /// </summary>
        public static string Adding_BoundTree {
            get {
                return ResourceManager.GetString("Adding_BoundTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to First child.
        /// </summary>
        public static string Adding_FirstChild {
            get {
                return ResourceManager.GetString("Adding_FirstChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Last child.
        /// </summary>
        public static string Adding_LastChild {
            get {
                return ResourceManager.GetString("Adding_LastChild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Node for UnBound TreeView.
        /// </summary>
        public static string Adding_UnBoundTree {
            get {
                return ResourceManager.GetString("Adding_UnBoundTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For Adding new item for C1TreeView, &lt;b&gt;ItemsSource must implement INotifyCollectionChanged&lt;/b&gt; to allow the control to get notified of the changes, then it will be reflected automatically in the control. &lt;br/&gt; In this sample, we use &lt;i&gt;ObservableCollection&amp;lt;T&amp;gt;&lt;/i&gt; which is a built-in implementation of a data collection that implements the INotifyCollectionChanged interface..
        /// </summary>
        public static string AddItemDescription {
            get {
                return ResourceManager.GetString("AddItemDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behavior.
        /// </summary>
        public static string Behavior {
            get {
                return ResourceManager.GetString("Behavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The control provides several properties that customize its behavior.&lt;br/&gt;
        ///&lt;b&gt;ShowLines:&lt;/b&gt; Gets or sets a value that indicates whether the connecting lines are visible.&lt;br/&gt;
        ///&lt;b&gt;WholeWidthSelection:&lt;/b&gt; Gets or sets whether the selection item should take the whole width of the control or not.&lt;br/&gt;
        ///&lt;b&gt;ExpandMode:&lt;/b&gt; Gets or sets a value indicating the allowed number of expanded C1TreeViewItems.&lt;br/&gt;
        ///&lt;ul&gt;
        ///	&lt;li&gt;ExpandMode.Single: Gets or sets a value that determines if sibling nodes should be collapsed w [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BehaviorDescription {
            get {
                return ResourceManager.GetString("BehaviorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clean Accordion.
        /// </summary>
        public static string Clean_Accordion {
            get {
                return ResourceManager.GetString("Clean_Accordion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample creates an Accordion from the C1TreeView control using CSS. It also uses the ItemTemplate to customize the appearance..
        /// </summary>
        public static string CleanAccordionDescription {
            get {
                return ResourceManager.GetString("CleanAccordionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can also drag and drop nodes between different TreeView controls. To do this, add an event handler for the &lt;b&gt;OnDragOver&lt;/b&gt; event to configure the behavior..
        /// </summary>
        public static string DragDropBtwTreesDescription {
            get {
                return ResourceManager.GetString("DragDropBtwTreesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drag and Drop Between Trees.
        /// </summary>
        public static string DragDropBtwTreesIndex {
            get {
                return ResourceManager.GetString("DragDropBtwTreesIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TreeView control supports Drag and Drop behavior. To enable this, set the &lt;b&gt;AllowDragDrop&lt;/b&gt; property to &lt;b&gt;true&lt;/b&gt;. This sample allows users to drag nodes to different positions in the TreeView..
        /// </summary>
        public static string DragDropDescription {
            get {
                return ResourceManager.GetString("DragDropDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drag and Drop.
        /// </summary>
        public static string DragDropIndex {
            get {
                return ResourceManager.GetString("DragDropIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;b&gt;ExpandedIconTemplate:&lt;/b&gt; Content template for tree item expanded icon.&lt;br/&gt;
        ///&lt;b&gt;CollapsedIconTemplate:&lt;/b&gt; Content template for tree item collapsed icon.&lt;br/&gt;
        ///&lt;b&gt;ExpandedIconStyle:&lt;/b&gt; Gets or sets the style applied to the expanded/collapsed icon.&lt;br/&gt;.
        /// </summary>
        public static string IconTemplateDescription {
            get {
                return ResourceManager.GetString("IconTemplateDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can customize your own view for C1TreeView item by defining in ItemTemplate tag..
        /// </summary>
        public static string ItemTemplate_Description {
            get {
                return ResourceManager.GetString("ItemTemplate_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When selecting nodes or traversing the C1TreeView control with the mouse or arrow keys, the OnItemSelected event may be triggered. You can use this event to control navigation. This example uses the OnItemSelected to display the selected node..
        /// </summary>
        public static string Navigation_Description {
            get {
                return ResourceManager.GetString("Navigation_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Navigating to &lt;b&gt;** {0} **&lt;/b&gt;.
        /// </summary>
        public static string NavigationTo {
            get {
                return ResourceManager.GetString("NavigationTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Node Borders.
        /// </summary>
        public static string NodeBorders {
            get {
                return ResourceManager.GetString("NodeBorders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using CSS, this example adds a bottom border to the tree nodes in the C1TreeView..
        /// </summary>
        public static string NodeBordersDescription {
            get {
                return ResourceManager.GetString("NodeBordersDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nodes.
        /// </summary>
        public static string Nodes {
            get {
                return ResourceManager.GetString("Nodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview.
        /// </summary>
        public static string Overview {
            get {
                return ResourceManager.GetString("Overview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ready.
        /// </summary>
        public static string Ready {
            get {
                return ResourceManager.GetString("Ready", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing.
        /// </summary>
        public static string Removing {
            get {
                return ResourceManager.GetString("Removing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove selected item.
        /// </summary>
        public static string RemovingBtn {
            get {
                return ResourceManager.GetString("RemovingBtn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample demonstrates how to remove nodes from the C1TreeView.
        /// </summary>
        public static string RemovingDescription {
            get {
                return ResourceManager.GetString("RemovingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Right to Left.
        /// </summary>
        public static string RightToLeft {
            get {
                return ResourceManager.GetString("RightToLeft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The C1TreeView supports the element&apos;s content to flow from right to left. To do this, the IsRTL property is set &quot;True&quot;.
        /// </summary>
        public static string RTLDescription {
            get {
                return ResourceManager.GetString("RTLDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Searching.
        /// </summary>
        public static string Searching {
            get {
                return ResourceManager.GetString("Searching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The C1AutoComplete control provides a good way to implement a search box to be used with the C1TreeView. In this sample, we call GetAllItems API to get all TreeViewItems and use that as an itemsSource for searching through the C1TreeView..
        /// </summary>
        public static string SearchingDescription {
            get {
                return ResourceManager.GetString("SearchingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TreeNodes can be displayed with a Checkbox by setting the ShowCheckboxes property to true.
        ///You can use the OnItemSelected to get or set the list of checked items..
        /// </summary>
        public static string ShowCheckboxesDescription {
            get {
                return ResourceManager.GetString("ShowCheckboxesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Styling.
        /// </summary>
        public static string Styling {
            get {
                return ResourceManager.GetString("Styling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can customize the appearance of the C1TreeView using CSS. This example changes the style of selected item and color of each TreeNode..
        /// </summary>
        public static string StylingDescription {
            get {
                return ResourceManager.GetString("StylingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This sample shows to how to define Unbound C1TreeView.
        /// </summary>
        public static string UnBoundTree_Description {
            get {
                return ResourceManager.GetString("UnBoundTree_Description", resourceCulture);
            }
        }
    }
}
