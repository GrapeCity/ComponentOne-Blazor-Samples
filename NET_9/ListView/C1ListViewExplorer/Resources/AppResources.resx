<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="FilterDescription" xml:space="preserve">
    <value>Enable asynchronous, full-text filtering on the C1ListView control through the C1DataCollection.</value>
  </data>
  <data name="FilterSummary" xml:space="preserve">
    <value>Shows how to filter a list or item just by tying in a text box</value>
  </data>
  <data name="FilterTitle" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="Filter_TextFilter_Placeholder" xml:space="preserve">
    <value>Type here to filter</value>
  </data>
  <data name="GettingStarted" xml:space="preserve">
    <value>Getting Started</value>
  </data>
  <data name="GroupingDescription" xml:space="preserve">
    <value>Display list items under grouped headings by grouping the C1ListView control through the C1DataCollection.</value>
  </data>
  <data name="GroupingSummary" xml:space="preserve">
    <value>Display a grouped list of items</value>
  </data>
  <data name="GroupingTitle" xml:space="preserve">
    <value>Grouping</value>
  </data>
  <data name="OnDemandDescription" xml:space="preserve">
    <value>With on-demand loading, C1ListView loads items as the user scrolls. Since the list does not know the total number of rows, the scroll bar size and position changes as more data is loaded into view. This virtualization technique is supported by the help of C1DataCollection.</value>
  </data>
  <data name="OnDemandSummary" xml:space="preserve">
    <value>Display a list of items that support bringing more pages as the user scrolls down</value>
  </data>
  <data name="OnDemandTitle" xml:space="preserve">
    <value>On Demand</value>
  </data>
  <data name="OnDemand_TextSearch_PlaceHolder" xml:space="preserve">
    <value>Enter here to search for videos on YouTube</value>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>The C1ListView control for Blazor provides asynchronous sorting, filtering, grouping and on-demand loading of items in a basic list by the help of the C1DataCollection component.</value>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="PagingDescription" xml:space="preserve">
    <value>Get a ListView with paging using C1ListView, C1DataPager and C1DataCollection. Like the virtual mode and on-demand loading, paging is supported in C1ListView by the help of C1DataCollection.</value>
  </data>
  <data name="PagingSummary" xml:space="preserve">
    <value>Paging allows displayaing a big source by spliting it in pages which are navigable through a DataPager control</value>
  </data>
  <data name="PagingTitle" xml:space="preserve">
    <value>Paging</value>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>Manage how items are selected by setting the selection mode. C1ListView supports single item and ranges when the user holds the SHIFT key. The selected items data can then be easily retrieved through the control’s Selection property.</value>
  </data>
  <data name="SelectionModesSummary" xml:space="preserve">
    <value>Shows the various selection modes.</value>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>Selection Modes</value>
  </data>
  <data name="SortAscendingly" xml:space="preserve">
    <value>Sort ascendingly</value>
  </data>
  <data name="SortDescendingly" xml:space="preserve">
    <value>Sort descendingly</value>
  </data>
  <data name="SortingDescription" xml:space="preserve">
    <value>You can easily sort the C1ListView asynchronously in either direction through the C1DataCollection.</value>
  </data>
  <data name="SortingSummary" xml:space="preserve">
    <value>Shows how to sort the displayed source of items</value>
  </data>
  <data name="SortingTitle" xml:space="preserve">
    <value>Sorting</value>
  </data>
  <data name="VirtualModeDescription" xml:space="preserve">
    <value>C1ListView supports data virtualization for loading large data sets in chunks or pages as the user scrolls. The list knows the total number of rows but only loads and displays those that are visible to the user. This virtualization technique is supported by the help of C1DataCollection.</value>
  </data>
  <data name="VirtualModeSummary" xml:space="preserve">
    <value>Displays a virtualized list of items.</value>
  </data>
  <data name="VirtualModeTitle" xml:space="preserve">
    <value>Virtual Mode</value>
  </data>
</root>