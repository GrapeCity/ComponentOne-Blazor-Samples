@page "/FlexChart/AxisBreak"
@using Localization
@using C1.Chart;
@using C1.Blazor.Chart;
@using C1.Blazor.Input;
@using System.Drawing
@using AxisBreakHelper;

<FlexChart @ref="chart" Class="chart" ChartType="chartType ?? ChartType.Column"
LegendPosition="Position.Bottom" BindingX="X" Binding="Y" ItemsSource="Data">
  <SeriesCollection>
    <Series Style="fill:rgba(136,189,230,1);stroke:rgba(136,189,230,1);stroke-width:3px" />
  </SeriesCollection>
  <AxisCollection>
    <Axis Name="ax" AxisType="AxisType.X" Position="Position.Bottom" />
    <Axis Name="ay" AxisType="AxisType.Y" Position="Position.Left" MajorGrid=true />
    <Axis Name="axis2" AxisType="AxisType.Y" Position="Position.Left" MajorUnit="10" />
  </AxisCollection>
</FlexChart>

<_Sections>
  <Title>@FlexChartRes.AxisBreakTitle</Title>
  <Settings>
    Axis Break <C1CheckBox Checked=AxisBreakChecked Style="@("margin:8px 8px 8px 0px")" />
    Chart Type <C1ComboBox ItemsSource="chartTypes" @bind-SelectedItem="chartType" Class="filled-drop-down" Style="@("margin:8px 8px 8px 0px")" />
  </Settings>
  <Summary>@FlexChartRes.AxisBreakSummary</Summary>
  <Description>@FlexChartRes.AxisBreakDescription</Description>
</_Sections>

@code {
  ChartType[] chartTypes = new ChartType[] { ChartType.Column, ChartType.Line, ChartType.LineSymbols, ChartType.Area };
  ChartType? chartType = ChartType.Column;

  Point[] Data { get; set; }

  FlexChart chart;

  protected override void OnInitialized()
  {
    Data = CreateData();
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
      AxisBreakHelper.CreateAxisBreak(chart.AxisY, 0, 10, 50, 100);

    base.OnAfterRender(firstRender);
  }

  void AxisBreakChecked(object sender, EventArgs args)
  {
    var axisBreak = ((C1CheckBox)sender).IsChecked;
    if (axisBreak == true)
      AxisBreakHelper.CreateAxisBreak(chart.AxisY, 0, 10, 50, 100);
    else
      AxisBreakHelper.Remove(chart);
  }

  Point[] CreateData()
  {
    var rnd = new Random();
    var pts = new Point[20];

    for (var i = 0; i < pts.Length; i++)
    {
      if (rnd.NextDouble() < 0.85)
        pts[i] = new Point(i, rnd.Next(0, 10));
      else
        pts[i] = new Point(i, 50 + rnd.Next(0, 50));
    }

    return pts;
  }

}
