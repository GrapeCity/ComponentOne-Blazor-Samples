<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FilterDescription" xml:space="preserve">
    <value>C1DataCollection を介して、C1ListView コントロールで非同期のフルテキストフィルタリングを有効にします。</value>
    <comment>Enable asynchronous, full-text filtering on the C1ListView control through the C1DataCollection.</comment>
  </data>
  <data name="FilterSummary" xml:space="preserve">
    <value>テキストボックスに入力するだけでリストまたはアイテムをフィルタリングする方法</value>
    <comment>Shows how to filter a list or item just by tying in a text box</comment>
  </data>
  <data name="FilterTitle" xml:space="preserve">
    <value>フィルタ</value>
    <comment>Filter</comment>
  </data>
  <data name="Filter_TextFilter_Placeholder" xml:space="preserve">
    <value>ここにフィルタリングするテキストを入力</value>
    <comment>Type here to filter</comment>
  </data>
  <data name="GroupingDescription" xml:space="preserve">
    <value>C1DataCollection を介して C1ListView コントロールをグループ化することにより、グループ化された見出しの下にリスト項目を表示します。</value>
    <comment>Display list items under grouped headings by grouping the C1ListView control through the C1DataCollection.</comment>
  </data>
  <data name="GroupingSummary" xml:space="preserve">
    <value>項目のグループ化されたリストを表示</value>
    <comment>Display a grouped list of items</comment>
  </data>
  <data name="GroupingTitle" xml:space="preserve">
    <value>グループ化</value>
    <comment>GroupingTitle</comment>
  </data>
  <data name="OnDemandDescription" xml:space="preserve">
    <value>オンデマンドロードでは、C1ListView はユーザーがスクロールするときにアイテムをロードします。リストには行の総数がわからないため、スクロールバーのサイズと位置は、ビューに読み込まれるデータが増えるにつれて変化します。この仮想化手法は、C1DataCollection の支援によってサポートされています。</value>
    <comment>With on-demand loading, C1ListView loads items as the user scrolls. Since the list does not know the total number of rows, the scroll bar size and position changes as more data is loaded into view. This virtualization technique is supported by the help of C1DataCollection.</comment>
  </data>
  <data name="OnDemandSummary" xml:space="preserve">
    <value>ユーザーが下にスクロールするときにさらにページを表示できるようにする項目のリストを表示</value>
    <comment>Display a list of items that support bringing more pages as the user scrolls down</comment>
  </data>
  <data name="OnDemandTitle" xml:space="preserve">
    <value>オンデマンド</value>
    <comment>On Demand</comment>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>Blazor の C1ListView コントロールは、C1DataCollection コンポーネントの支援により、非同期ソート、フィルタリング、グループ化、および基本リスト内のアイテムのオンデマンドロードを提供します。</value>
    <comment>The C1ListView control for Blazor provides asynchronous sorting, filtering, grouping and on-demand loading of items in a basic list by the help of the C1DataCollection component.</comment>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="PagingDescription" xml:space="preserve">
    <value>C1ListView、C1DataPager、および C1DataCollection を使用して、ページングで ListView を取得します。仮想モードおよびオンデマンドロードと同様に、C1ListView では、C1DataCollection の支援によりページングがサポートされています。</value>
    <comment>Get a ListView with paging using C1ListView, C1DataPager and C1DataCollection. Like the virtual mode and on-demand loading, paging is supported in C1ListView by the help of C1DataCollection.</comment>
  </data>
  <data name="PagingSummary" xml:space="preserve">
    <value>DataPager コントロールを介してナビゲート可能なページに分割することによって大規模なソースを表示</value>
    <comment>Paging allows displayaing a big source by spliting it in pages which are navigable through a DataPager control</comment>
  </data>
  <data name="PagingTitle" xml:space="preserve">
    <value>ページング</value>
    <comment>Paging</comment>
  </data>
  <data name="SelectedItemText" xml:space="preserve">
    <value>選択された項目</value>
    <comment>CheckedItems</comment>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>選択モードを設定して、アイテムの選択方法を管理します。C1ListView は、ユーザーが Shift キーを押したときに単一の項目と範囲をサポートします。選択したアイテムのデータは、コントロールの[選択]プロパティから簡単に取得できます。</value>
    <comment>Manage how items are selected by setting the selection mode. C1ListView supports single item and ranges when the user holds the SHIFT key. The selected items data can then be easily retrieved through the control’s Selection property.</comment>
  </data>
  <data name="SelectionModesSummary" xml:space="preserve">
    <value>さまざまな選択モードを表示</value>
    <comment>Shows the various selection modes.</comment>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>選択モード</value>
    <comment>Selection Modes</comment>
  </data>
  <data name="SortAscendingly" xml:space="preserve">
    <value>昇順でソート</value>
    <comment>Sort ascendingly</comment>
  </data>
  <data name="SortDescendingly" xml:space="preserve">
    <value>降順でソート</value>
    <comment>Sort descendingly</comment>
  </data>
  <data name="SortingDescription" xml:space="preserve">
    <value>C1DataCollection を使用して、C1ListView をいずれかの方向に非同期で簡単に並べ替えることができます。</value>
    <comment>You can easily sort the C1ListView asynchronously in either direction through the C1DataCollection.</comment>
  </data>
  <data name="SortingSummary" xml:space="preserve">
    <value>表示された項目のソースをソートする方法</value>
    <comment>Shows how to sort the displayed source of items</comment>
  </data>
  <data name="SortingTitle" xml:space="preserve">
    <value>ソート</value>
    <comment>Sorting</comment>
  </data>
  <data name="VirtualModeDescription" xml:space="preserve">
    <value>C1ListView は、ユーザーがスクロールするときに大きなデータセットをチャンクまたはページでロードするためのデータ仮想化をサポートしています。リストは行の総数を知っていますが、ユーザーに表示されている行のみをロードして表示します。この仮想化手法は、C1DataCollection の支援によってサポートされています。</value>
    <comment>C1ListView supports data virtualization for loading large data sets in chunks or pages as the user scrolls. The list knows the total number of rows but only loads and displays those that are visible to the user. This virtualization technique is supported by the help of C1DataCollection.</comment>
  </data>
  <data name="VirtualModeSummary" xml:space="preserve">
    <value>項目の仮想化されたリストを表示</value>
    <comment>Displays a virtualized list of items.</comment>
  </data>
  <data name="VirtualModeTitle" xml:space="preserve">
    <value>仮想モード</value>
    <comment>Virtual Mode</comment>
  </data>
</root>