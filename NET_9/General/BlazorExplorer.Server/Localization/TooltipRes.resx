<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Index_Text0" xml:space="preserve">
    <value>This is sample of &lt;b&gt;&lt;span id="testTooltip"&gt;tooltip&lt;/span&gt;&lt;/b&gt;. Hover on it and its tooltip will be displayed.</value>
  </data>
  <data name="Index_Text1" xml:space="preserve">
    <value>We can add a tooltip for a span element, or a button like this. &lt;br /&gt;
  &lt;button class="btn btn-default" id="btnOpenPopup"&gt;Hover me!&lt;/button&gt;</value>
  </data>
  <data name="Index_Text10" xml:space="preserve">
    <value>The tooltip is at the Bottom and aligned to the Left of the referenced element.</value>
  </data>
  <data name="Index_Text11" xml:space="preserve">
    <value>The tooltip is at the Bottom of the referenced element.</value>
  </data>
  <data name="Index_Text12" xml:space="preserve">
    <value>The tooltip is at the Bottom and aligned to the Right of the referenced element.</value>
  </data>
  <data name="Index_Text13" xml:space="preserve">
    <value>The tooltip is on the Left and aligned to the Top of the referenced element.</value>
  </data>
  <data name="Index_Text14" xml:space="preserve">
    <value>The tooltip is on the Left of the referenced element.</value>
  </data>
  <data name="Index_Text15" xml:space="preserve">
    <value>The tooltip is on the Left and aligned to the Bottom of the referenced element.</value>
  </data>
  <data name="Index_Text16" xml:space="preserve">
	  <value>The tooltip is on the Right and aligned to the Top of the referenced element.</value>
  </data>
  <data name="Index_Text17" xml:space="preserve">
    <value>The tooltip is on the Right of the referenced element.</value>
  </data>
  <data name="Index_Text18" xml:space="preserve">
    <value>The tooltip is on the Right and aligned to the Bottom of the referenced element.</value>
  </data>
  <data name="Index_Text2" xml:space="preserve">
    <value>We can display a tooltip with the custom content. Hover this &lt;span id="ttcustom" style="font:bolder;color:brown"&gt;span&lt;/span&gt; for sample.</value>
  </data>
  <data name="Index_Text3" xml:space="preserve">
    <value>The tooltip can be displayed at different positions around the target element like it is shown below.</value>
  </data>
  <data name="Index_Text4" xml:space="preserve">
    <value>This is text content</value>
  </data>
  <data name="Index_Text5" xml:space="preserve">
    <value>This is tooltip of button</value>
  </data>
  <data name="Index_Text6" xml:space="preserve">
    <value>&lt;div class="ttPanel"&gt;
      &lt;div class="ttTitle"&gt;Title of tooltip box&lt;/div&gt;
      &lt;div class="ttContent"&gt;This is a &lt;b&gt;box&lt;/b&gt; tooltip &lt;br /&gt;content&lt;/div&gt;
    &lt;/div&gt;</value>
  </data>
  <data name="Index_Text7" xml:space="preserve">
    <value>The tooltip is at the Top and aligned to the Left of the referenced element.</value>
  </data>
  <data name="Index_Text8" xml:space="preserve">
    <value>The tooltip is at the Top of the referenced element.</value>
  </data>
  <data name="Index_Text9" xml:space="preserve">
    <value>The tooltip is at the Top and aligned to the Right of the referenced element.</value>
  </data>
  <data name="InputFormDesc" xml:space="preserve">
    <value>Tooltips for validating input fields.</value>
  </data>
  <data name="InputFormSummary" xml:space="preserve">
    <value>Tooltip for validation</value>
  </data>
  <data name="InputFormTitle" xml:space="preserve">
    <value>Validate the input fields.</value>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>Tooltip is a floating popup that appear when the user moves the mouse over target elements.&lt;br /&gt; Use the Target property to associate a tooltip with elements on the page &lt;br /&gt;By default, tooltips are positioned above the target element. User can change that default by specifying the position where the tooltip should appear. &lt;br /&gt;&lt;br /&gt;This sample adds tooltips to some span elements and to a button. The table shows all value of PopupPosition.</value>
  </data>
  <data name="OverviewSummary" xml:space="preserve">
    <value>Tooltip allows user to add a floating popup that appears when the user moves the mouse over target elements.</value>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Validation_Age" xml:space="preserve">
    <value>Age</value>
  </data>
  <data name="Validation_Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Validation_Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Validation_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Validation_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Validation_Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="Validation_Text0" xml:space="preserve">
    <value>You need input the Name!</value>
  </data>
  <data name="Validation_Text1" xml:space="preserve">
    <value>Age should not be empty.</value>
  </data>
  <data name="Validation_Text10" xml:space="preserve">
    <value>Your age is:</value>
  </data>
  <data name="Validation_Text11" xml:space="preserve">
    <value>Your email is:</value>
  </data>
  <data name="Validation_Text12" xml:space="preserve">
    <value>Your user name is:</value>
  </data>
  <data name="Validation_Text13" xml:space="preserve">
    <value>Your password is:</value>
  </data>
  <data name="Validation_Text14" xml:space="preserve">
    <value>Comment:</value>
  </data>
  <data name="Validation_Text2" xml:space="preserve">
    <value>Age should be number and greater than 18.</value>
  </data>
  <data name="Validation_Text3" xml:space="preserve">
    <value>Your email is required.</value>
  </data>
  <data name="Validation_Text4" xml:space="preserve">
    <value>You need input the user name.</value>
  </data>
  <data name="Validation_Text5" xml:space="preserve">
    <value>User name should has length &gt;= 5.</value>
  </data>
  <data name="Validation_Text6" xml:space="preserve">
    <value>You need input the pass word.</value>
  </data>
  <data name="Validation_Text7" xml:space="preserve">
    <value>Password should has length &gt;= 8.</value>
  </data>
  <data name="Validation_Text8" xml:space="preserve">
    <value>Your inputs</value>
  </data>
  <data name="Validation_Text9" xml:space="preserve">
    <value>Your name is:</value>
  </data>
  <data name="Validation_User" xml:space="preserve">
    <value>User</value>
  </data>
</root>