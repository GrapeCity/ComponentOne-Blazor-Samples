@page "/FlexPie/Animation"
@using Localization
@using System.ComponentModel;
@using System.Collections.ObjectModel;
@using C1.Chart;
@using C1.Blazor.Chart;
@using C1.Blazor.Input;

<FlexPie @ref="chart" Class="chart" InnerRadius="innerRadius ?? 0" Offset="offset ?? 0"
         LegendPosition="Position.Bottom"
         BindingName="Name" Binding="Value" AnimationSettings="AnimationSettings.All">
    <Label>
        <PieDataLabel Position="PieLabelPosition.Inside" Content="{value}" Style="font-size:12px" />
    </Label>
</FlexPie>

<_Sections>
    <Title>@FlexChartRes.PieAnimationTitle</Title>
    <Summary>@FlexChartRes.PieAnimationSummary</Summary>
    <Description>@FlexChartRes.PieAnimationDescription</Description>
    <Settings>
        Inner Radius <C1ComboBox ItemsSource="innerRadiuses" @bind-SelectedItem="innerRadius" Class="filled-drop-down" Style="@("margin:8px 8px 8px 0px")" />
        Offset <C1ComboBox ItemsSource="offsets" @bind-SelectedItem="offset" Class="filled-drop-down" Style="@("margin:8px 8px 8px 0px")" />

        <button class="btn btn-primary" @onclick="@(()=> NewData())">New data</button>
        <button class="btn btn-primary" @onclick="@(()=> UpdateData())">Update data</button>
    </Settings>
</_Sections>

@code {
    FlexPie chart;
    double[] innerRadiuses = new double[] { 0, 0.25, 0.5, 0.75 };
    double? innerRadius = 0;

    double[] offsets = new double[] { 0, 0.25, 0.5, 0.75 };
    double? offset = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            NewData();
        base.OnAfterRender(firstRender);
    }

    #region Data

    Random rnd = new Random();

    void NewData(int npts = 6)
    {
        var data = new ObservableCollection<DataItem>();

        for (var i = 0; i < npts; i++)
            data.Add(new DataItem { Value = rnd.Next(1, 10), Name = "Item " + i.ToString() });

        chart.BeginUpdate();
        chart.ItemsSource = data;
        chart.EndUpdate();
    }

    private void UpdateData()
    {
        chart.BeginUpdate();

        var data = chart.ItemsSource as ObservableCollection<DataItem>;
        if (data != null)
        {
            var npts = data.Count;

            for (var i = 0; i < npts; i++)
                data[i].Value = rnd.Next(1, 10);
        }

        chart.EndUpdate();
    }


    public class DataItem : INotifyPropertyChanged
    {
        string name;
        double value;

        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (name != value)
                {
                    name = value;
                    OnPropertyChanged("Name");
                }
            }
        }

        public double Value
        {
            get
            {
                return value;
            }
            set
            {
                if (this.value != value)
                {
                    this.value = value;
                    OnPropertyChanged("Value");
                }
            }
        }


        public event PropertyChangedEventHandler PropertyChanged;

        void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    #endregion

}
