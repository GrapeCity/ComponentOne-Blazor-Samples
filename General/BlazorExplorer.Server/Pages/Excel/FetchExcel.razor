@page "/Excel/FetchExcel"
@inject IJSRuntime JsRuntime
@using Localization
@using System.Drawing
@using System.Globalization
@using System.IO
@using System.Text
@using C1.Excel
@using GrapeCity.Documents.Imaging
@using C1.Blazor.Input;
@inject WeatherExcelService ExcelService

<h4>@ExcelRes.WeatherForecast</h4>

@if (forecast == null || weathers == null)
{
    <p><em>@ExcelRes.Loading</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@ExcelRes.Date</th>
                <th>@ExcelRes.CTemp</th>
                <th>@ExcelRes.FTemp</th>
                <th>@ExcelRes.Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weather in weathers)
            {
                <tr>
                    <td>@weather.Date.ToShortDateString()</td>
                    <td>@weather.TemperatureC</td>
                    <td>@weather.TemperatureF</td>
                    <td>@weather.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<_Sections>
    <Title>@ExcelRes.FetchExcelTitle</Title>
    <Summary>@ExcelRes.FetchExcelSummary</Summary>
    <Description>@ExcelRes.FetchExcelDescription</Description>
</_Sections>

@code {
    private List<WeatherForecast>? weathers;
    private byte[]? forecast;

    protected override async Task OnInitializedAsync()
    {
        forecast = await ExcelService.GetExcelAsync(DateTime.Now);
        if (forecast != null)
        {
            var book = new C1XLBook();
            using (var ms = new MemoryStream(forecast))
            {
                book.Load(ms, FileFormat.OpenXml);
            }
            ReadRows(book);
        }
    }

    void ReadRows(C1XLBook book)
    {
        int start = -1;
        var sheet = book.Sheets[0];
        weathers = new List<WeatherForecast>();
        for (int r = 0; r < ushort.MaxValue; r++)
        {
            if (r > 0 && sheet[r, 1].Text.Length == 0)
            {
                break;
            }
            if (start >= 0)
            {
                var weather = new WeatherForecast()
                    {
                        Date = (DateTime)sheet[r, 1].Value,
                        TemperatureC = (int)(double)sheet[r, 2].Value,
                        TemperatureF = (int)(((double)sheet[r, 2].Value * 9) / 5) + 32,
                        Summary = (string)sheet[r, 4].Value,
                    };
                weathers.Add(weather);
            }
            else if (sheet[r, 1].Text.Equals(ExcelRes.Date) && sheet[r, 4].Text.Equals(ExcelRes.Summary))
            {
                start = r;
            }
        }
    }
}
