<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomStyleDescription" xml:space="preserve">
    <value>CSS を使用するか、CalendarのformatItem イベントを使用して、Dropdown カレンダーの特定の日付の外観をカスタマイズすることで、InputDate とそのドロップダウンカレンダーの外観をカスタマイズできます。</value>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>ユーザーが選択できるカスタムの日付範囲を指定したり、ドロップダウンで複数月のカレンダーを使用してマウスまたはキーボードで日付範囲を選択することもできます。</value>
  </data>
  <data name="OverviewSummary" xml:space="preserve">
    <value>C1DateRangePicker コントロールは、C1DatePicker コントロールを拡張し、日付範囲を編集できるように構成します。</value>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>概要</value>
  </data>
  <data name="CustomStyleTitle" xml:space="preserve">
    <value>カスタムスタイル</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>結果</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="Index_EndDate" xml:space="preserve">
    <value>終了日</value>
    <comment>End date</comment>
  </data>
  <data name="Index_EnterCalendarHeight" xml:space="preserve">
    <value>カレンダーの高さ</value>
    <comment>Enter calendar height</comment>
  </data>
  <data name="Index_EnterCalendarWidth" xml:space="preserve">
    <value>カレンダーの幅</value>
    <comment>Enter calendar width</comment>
  </data>
  <data name="Index_Format" xml:space="preserve">
    <value>フォーマット</value>
    <comment>Format</comment>
  </data>
  <data name="Index_LastWeek" xml:space="preserve">
    <value>先週</value>
    <comment>Last week</comment>
  </data>
  <data name="Index_MaxDate" xml:space="preserve">
    <value>最大日付</value>
    <comment>Max date</comment>
  </data>
  <data name="Index_MinDate" xml:space="preserve">
    <value>最小日付</value>
    <comment>Min date</comment>
  </data>
  <data name="Index_Month_Count" xml:space="preserve">
    <value>月数</value>
    <comment>Mount count</comment>
  </data>
  <data name="Index_NextWeek" xml:space="preserve">
    <value>来週</value>
    <comment>Next week</comment>
  </data>
  <data name="Index_Placeholder" xml:space="preserve">
    <value>プレースホルダー</value>
    <comment>Placeholder</comment>
  </data>
  <data name="Index_SelectCalendarOrientation" xml:space="preserve">
    <value>CalendarOrientation の選択</value>
    <comment>Select CalendarOrientation</comment>
  </data>
  <data name="Index_Separator" xml:space="preserve">
    <value>セパレーター（例: to、till、任意の文字または文字列）</value>
    <comment>Separator (eg: to, till, any char or string)</comment>
  </data>
  <data name="Index_StartDate" xml:space="preserve">
    <value>開始日</value>
    <comment>Start date</comment>
  </data>
  <data name="Index_ThisWeek" xml:space="preserve">
    <value>今週</value>
    <comment>This week</comment>
  </data>
  <data name="IsEnabled" xml:space="preserve">
    <value>有効</value>
    <comment>property name caption</comment>
  </data>
  <data name="IsReadOnly" xml:space="preserve">
    <value>読み取り専用</value>
    <comment>property name caption</comment>
  </data>
</root>