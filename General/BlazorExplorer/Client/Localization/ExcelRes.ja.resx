<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExcelTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="ClientFetch" xml:space="preserve">
    <value>このページでは、クライアントからのデータのフェッチについて説明します。</value>
    <comment>This page demonstrates fetching data from the client.</comment>
  </data>
  <data name="CTemp" xml:space="preserve">
    <value>温度 (C)</value>
    <comment>Temp. (C)</comment>
  </data>
  <data name="Date" xml:space="preserve">
    <value>日付</value>
    <comment>Date</comment>
  </data>
  <data name="Download" xml:space="preserve">
    <value>Excel ファイル名と形式を選択</value>
    <comment>Select Excel file name and format</comment>
  </data>
  <data name="ExcelFetch" xml:space="preserve">
    <value>このページでは、サーバーから Excel ファイル データをフェッチする方法を示します。</value>
    <comment>This page demonstrates fetching Excel file data from the server.</comment>
  </data>
  <data name="ExportDescription" xml:space="preserve">
    <value>Save メソッドを使用して、FlexGrid に表示されているデータを Excel 形式にエクスポートできます。</value>
    <comment>The Save method allows exporting the data shown in the FlexGrid to Excel formats.</comment>
  </data>
  <data name="ExportSummary" xml:space="preserve">
    <value>FlexGrid データを Excel 形式にエクスポートする方法を示します。</value>
    <comment>Shows how to export FlexGrid data to Excel formats.</comment>
  </data>
  <data name="ExportTitle" xml:space="preserve">
    <value>エクスポート</value>
    <comment>Export</comment>
  </data>
  <data name="FetchDataSummary" xml:space="preserve">
    <value>サンプル データを Excel 形式にエクスポートする方法を示します。</value>
    <comment>Shows how to export sample data to Excel formats.</comment>
  </data>
  <data name="FetchDataDescription" xml:space="preserve">
    <value>このサンプルでは、データを取得してクライアント上の Excel ファイルに保存する方法を示します。</value>
    <comment>This sample shows how to fetch data and save them into Excel file on the client.</comment>
  </data>
  <data name="FetchDataTitle" xml:space="preserve">
    <value>データを取得する</value>
    <comment>Fetch Data</comment>
  </data>
  <data name="FetchExcelDescription" xml:space="preserve">
    <value>このサンプルでは、クライアント側でダウンロードした Excel ファイルからデータを読み取る方法を示します。</value>
    <comment>This sample shows how you can read data from the downloaded Excel file on the client side.</comment>
  </data>
  <data name="FetchExcelSummary" xml:space="preserve">
    <value>クライアントで Excel ファイルを読み取る方法を示します。</value>
    <comment>Shows how to read Excel file on the client.</comment>
  </data>
  <data name="FetchExcelTitle" xml:space="preserve">
    <value>Excel ファイルを取得する</value>
    <comment>Fetch Excel file</comment>
  </data>
  <data name="FTemp" xml:space="preserve">
    <value>温度 (F)</value>
    <comment>Temp. (F)</comment>
  </data>
  <data name="IndexDescription" xml:space="preserve">
    <value>C1.Excel ライブラリを使用して、データを XLSX (Open XML 形式)、XLS (バイナリ BIFF8 形式)、および CSV (カンマ区切り値形式) に保存できます。</value>
    <comment>The C1.Excel library allows to save data into XLSX (Open XML format), XLS (Binary BIFF8 format) and CSV (Comma Separated Values format).</comment>
  </data>
  <data name="IndexSheets" xml:space="preserve">
    <value>単一またはすべてのシートを選択</value>
    <comment>Select one sheet or all</comment>
  </data>
  <data name="IndexSummary" xml:space="preserve">
    <value>C1.Excel ライブラリを使用して Excel ファイルを作成および保存する方法を示します。</value>
    <comment>Shows how to create and save Excel file using C1.Excel library.</comment>
  </data>
  <data name="IndexTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>読み込んでいます...</value>
    <comment>Loading...</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
    <comment>Save</comment>
  </data>
  <data name="ServerFetch" xml:space="preserve">
    <value>このページでは、サーバーからデータをフェッチする方法を示します。</value>
    <comment>This page demonstrates fetching data from the server.</comment>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>サマリー</value>
    <comment>Summary</comment>
  </data>
  <data name="WeatherForecast" xml:space="preserve">
    <value>天気予報</value>
    <comment>Weather forecast</comment>
  </data>
</root>