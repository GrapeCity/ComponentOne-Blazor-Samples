<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Apply" xml:space="preserve">
    <value>適用</value>
    <comment>Apply</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>キャンセル</value>
    <comment>Cancel</comment>
  </data>
  <data name="Collapse" xml:space="preserve">
    <value>折りたたみ</value>
    <comment>Collapse</comment>
  </data>
  <data name="ColumnDefinitionSummary" xml:space="preserve">
    <value>列を指定して書式設定する方法</value>
    <comment>Shows how to specify and format columns.</comment>
  </data>
  <data name="ColumnDefinitionTitle" xml:space="preserve">
    <value>列の定義</value>
    <comment>Column Definitions</comment>
  </data>
  <data name="CustomCellsDescription" xml:space="preserve">
    <value>数値をゲージで表示するセル</value>
    <comment>Customizes a cell by displaying a numeric value in a gauge.</comment>
  </data>
  <data name="CustomCellsTitle" xml:space="preserve">
    <value>カスタムセル</value>
    <comment>Custom Cells</comment>
  </data>
  <data name="EditCustomer" xml:space="preserve">
    <value>顧客データの編集</value>
    <comment>Edit Customer</comment>
  </data>
  <data name="EditingDescription" xml:space="preserve">
    <value>入力フォームでセル内容を編集</value>
    <comment>Edit cells by input form rather than inline.</comment>
  </data>
  <data name="EditingTitle" xml:space="preserve">
    <value>編集フォーム</value>
    <comment>Editing Form</comment>
  </data>
  <data name="EditRow" xml:space="preserve">
    <value>行の編集</value>
    <comment>edit a single row</comment>
  </data>
  <data name="EmptyListText" xml:space="preserve">
    <value>表示するデータはありません。</value>
    <comment>There are no videos to show.</comment>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>フィルタ</value>
    <comment>Filter</comment>
  </data>
  <data name="FilterRowDescription" xml:space="preserve">
    <value>列のフィルタ条件をフォームで指定</value>
    <comment>Filters the data by columns through GridFilterRow.</comment>
  </data>
  <data name="FilterPlaceholderText" xml:space="preserve">
    <value>フィルタリングするテキストを入力</value>
    <comment>Enter text to filter</comment>
  </data>
  <data name="FilterRowTitle" xml:space="preserve">
    <value>フィルタ処理</value>
    <comment>FilterRow</comment>
  </data>
  <data name="FullTextFilterSummary" xml:space="preserve">
    <value>列のデータをフィルタリングして強調表示</value>
    <comment>Filters and highlights the data across all columns.</comment>
  </data>
  <data name="FullTextFilterTitle" xml:space="preserve">
    <value>フルテキストフィルター</value>
    <comment>Full Text Filter</comment>
  </data>
  <data name="GettingStartedDescription" xml:space="preserve">
    <value>FlexGrid でデータを表示、編集、集計</value>
    <comment>Display, edit and aggregate your data all at once with FlexGrid.</comment>
  </data>
  <data name="GettingStartedTitle" xml:space="preserve">
    <value>FlexGrid の基本機能</value>
    <comment>Getting Started</comment>
  </data>
  <data name="GroupingSummary" xml:space="preserve">
    <value>コレクションをグループ化して集計</value>
    <comment>Groups and aggregates a collection of data.</comment>
  </data>
  <data name="GroupingTitle" xml:space="preserve">
    <value>グループ化</value>
    <comment>Grouping</comment>
  </data>
  <data name="OnDemandSummary" xml:space="preserve">
    <value>スクロールの終端で表示データをロード</value>
    <comment>Load items on demand as the user scrolls down the grid.</comment>
  </data>
  <data name="OnDemandTitle" xml:space="preserve">
    <value>データオンデマンド</value>
    <comment>On Demand</comment>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>フィルタを解除</value>
    <comment>remove filter</comment>
  </data>
  <data name="SearchPlaceholderText" xml:space="preserve">
    <value>YouTube で検索するビデオのテキストを入力</value>
    <comment>Enter text to search videos on YouTube</comment>
  </data>
  <data name="SelectionModesSummary" xml:space="preserve">
    <value>さまざまなセル選択モードを表示します。</value>
    <comment>Shows the various cell selection modes.</comment>
  </data>
  <data name="SelectionModesTitle" xml:space="preserve">
    <value>選択モード</value>
    <comment>Selection Modes</comment>
  </data>
  <data name="Sort" xml:space="preserve">
    <value>ソート</value>
    <comment>Sort</comment>
  </data>
  <data name="ConditionalFormattingSummary" xml:space="preserve">
    <value>CellFactory を使用して条件付き書式を適用</value>
    <comment>Uses a CellFactory to apply conditional formatting.</comment>
  </data>
  <data name="ConditionalFormattingTitle" xml:space="preserve">
    <value>条件付き書式</value>
    <comment>Conditional Formatting</comment>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
    <comment>OK</comment>
  </data>
  <data name="SelectRowMessage" xml:space="preserve">
    <value>編集する行を選択してください。対象の行をダブルタップしても編集できます。</value>
    <comment>Please select a row first or double-tap the row directly.</comment>
  </data>
  <data name="CellFreezingSummary" xml:space="preserve">
    <value>行、列のセルを固定表示する方法</value>
    <comment>Shows frozen columns, rows and cell merging.</comment>
  </data>
  <data name="CellFreezingTitle" xml:space="preserve">
    <value>セルの固定</value>
    <comment>Cell Freezing &amp; Merging</comment>
  </data>
  <data name="ResponsiveSizingSummary" xml:space="preserve">
    <value>スターサイズ変更を使用するレスポンシブ列レイアウト</value>
    <comment>Shows a responsive column layout that uses star sizing.</comment>
  </data>
  <data name="ResponsiveSizingTitle" xml:space="preserve">
    <value>スターサイズ設定</value>
    <comment>Responsive Sizing</comment>
  </data>
  <data name="EditConfirmationSummary" xml:space="preserve">
    <value>セルの内容を変更する前にダイアログを表示</value>
    <comment>Shows how to prompt the user with a confirmation dialog before committing changes to a cell.</comment>
  </data>
  <data name="EditConfirmationTitle" xml:space="preserve">
    <value>編集の確認</value>
    <comment>Edit Confirmation</comment>
  </data>
  <data name="EditConfirmationQuestion" xml:space="preserve">
    <value>編集内容を反映しますか？</value>
    <comment>Do you want to commit the edit?</comment>
  </data>
  <data name="EditConfirmationQuestionTitle" xml:space="preserve">
    <value>編集確認</value>
    <comment>Confirm Edit</comment>
  </data>
  <data name="ColumnLayoutDescription" xml:space="preserve">
    <value>列マネージャを利用してレイアウトを変更</value>
    <comment>Shows a custom column manager to modify column layout.</comment>
  </data>
  <data name="ColumnLayoutTitle" xml:space="preserve">
    <value>列レイアウト管理</value>
    <comment>Column Layout</comment>
  </data>
  <data name="EditColumnLayout" xml:space="preserve">
    <value>編集</value>
    <comment>Edit</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
    <comment>Save</comment>
  </data>
  <data name="ResponsiveSizingInstructions" xml:space="preserve">
    <value>デバイスの回転でスターサイズ機能の動作を確認</value>
    <comment>Rotate the device to see star-sizing in action.</comment>
  </data>
  <data name="RowDetailsSummary" xml:space="preserve">
    <value>グリッドを展開／折りたたみして明細を表示</value>
    <comment>Expand and collapse row details.</comment>
  </data>
  <data name="RowDetailsTitle" xml:space="preserve">
    <value>詳細行</value>
    <comment>Row Details</comment>
  </data>
  <data name="CellMergingSummary" xml:space="preserve">
    <value>隣接セルをマージして表示する</value>
    <comment>Shows a grid with cell merging.</comment>
  </data>
  <data name="CellMergingTitle" xml:space="preserve">
    <value>セル結合の応用</value>
    <comment>Cells Merging</comment>
  </data>
  <data name="UnboundSummary" xml:space="preserve">
    <value>データソースに接続しない行と列で表を作成</value>
    <comment>Add empty rows and columns to create an unbound grid.</comment>
  </data>
  <data name="UnboundTitle" xml:space="preserve">
    <value>アンバウンド(データ非接続)</value>
    <comment>Unbound</comment>
  </data>
  <data name="CellsSelectedText" xml:space="preserve">
    <value>個のセルを選択</value>
    <comment>cell(s) selected</comment>
  </data>
  <data name="CustomAppearanceSummary" xml:space="preserve">
    <value>外観スタイルを変更してグリッドを表示</value>
    <comment>Shows a grid with a custom style.</comment>
  </data>
  <data name="CustomAppearanceTitle" xml:space="preserve">
    <value>外観のカスタマイズ</value>
    <comment>Custom Appearance</comment>
  </data>
  <data name="DetailsVisibiltyMode" xml:space="preserve">
    <value>詳細の表示モード</value>
    <comment>DetailsVisibiltyMode</comment>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>金曜日</value>
    <comment>Thursday</comment>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>月曜日</value>
    <comment>Monday</comment>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>土曜日</value>
    <comment>Saturday</comment>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>日曜日</value>
    <comment>Sunday</comment>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>木曜日</value>
    <comment>Thursday</comment>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>火曜日</value>
    <comment>Tuesday</comment>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>水曜日</value>
    <comment>Wednesday</comment>
  </data>
  <data name="Weekday" xml:space="preserve">
    <value>平日</value>
    <comment>Weekday</comment>
  </data>
  <data name="Weekend" xml:space="preserve">
    <value>週末</value>
    <comment>Weekend</comment>
  </data>
  <data name="ShowMarquee" xml:space="preserve">
    <value>マーキーの表示</value>
    <comment>ShowMarquee</comment>
  </data>
  <data name="NewRowDescription" xml:space="preserve">
    <value>新しい行の追加を示します。</value>
    <comment>Shows adding new rows.</comment>
  </data>
  <data name="NewRowTitle" xml:space="preserve">
    <value>新規行</value>
    <comment>New Row</comment>
  </data>
  <data name="NewRowPlaceholder" xml:space="preserve">
    <value>クリックして新しい行を追加する</value>
    <comment>Click here to add a new row</comment>
  </data>
  <data name="MatchCaseLabel" xml:space="preserve">
    <value>大/小文字を区別</value>
    <comment>Match Case</comment>
  </data>
  <data name="MatchWholeWordLabel" xml:space="preserve">
    <value>単語単位</value>
    <comment>Match Whole Word</comment>
  </data>
  <data name="CheckListSummary" xml:space="preserve">
    <value>チェックボックスを介して FlexGrid 行を選択する方法</value>
    <comment>Show how to select flexgrid rows through checkboxes.</comment>
  </data>
  <data name="CheckListTitle" xml:space="preserve">
    <value>チェックリスト</value>
    <comment>Check-List</comment>
  </data>
  <data name="CustomSortIconTitle" xml:space="preserve">
    <value>カスタムソートアイコン</value>
    <comment>Custom Sort Icon</comment>
  </data>
  <data name="CustomSortIconSummary" xml:space="preserve">
    <value>ヘッダー列にカスタムソートアイコンを表示</value>
    <comment>Show how to custom sort icon in header column.</comment>
  </data>
  <data name="SortIconPosition" xml:space="preserve">
    <value>ソートアイコンの位置</value>
    <comment>Sort icon position</comment>
  </data>
  <data name="SortIconTemplate" xml:space="preserve">
    <value>ソートアイコンのテンプレート</value>
    <comment>Sort icon template</comment>
  </data>
  <data name="LiveUpdatesDescription" xml:space="preserve">
    <value>グリッド内の変更をアニメーションで表す方法を示します。</value>
    <comment>Shows how to animates changes in the grid.</comment>
  </data>
  <data name="LiveUpdatesTitle" xml:space="preserve">
    <value>ライブ更新</value>
    <comment>Live updates</comment>
  </data>
  <data name="ColorUpdates" xml:space="preserve">
    <value>色分けされた更新</value>
    <comment>Color coded updates</comment>
  </data>
  <data name="ExportSummary" xml:space="preserve">
    <value>CSV、テキスト、および HTML 形式でエクスポートする方法を示します。</value>
    <comment>Shows how to export to CSV, text, and HTML.</comment>
  </data>
  <data name="ExportTitle" xml:space="preserve">
    <value>エクスポート</value>
    <comment>Export</comment>
  </data>
  <data name="PagingSummary" xml:space="preserve">
    <value>C1DataPager を使用して、FlexGrid にバインドされたデータのさまざまなページをナビゲートする方法</value>
    <comment>Shows how to use C1DataPager to navigate through different  pages of data bound to FlexGrid</comment>
  </data>
  <data name="PagingTitle" xml:space="preserve">
    <value>ページング</value>
    <comment>Paging</comment>
  </data>
  <data name="VirtualModeSummary" xml:space="preserve">
    <value>ユーザーが下にスクロールするときにアイテムが取得されるデータソースに FlexGrid をバインドする方法</value>
    <comment>Shows how to bind FlexGrid to a data source whose items are fetch as the user scroll down.</comment>
  </data>
  <data name="VirtualModeTitle" xml:space="preserve">
    <value>仮想モード</value>
    <comment>Virtual Mode</comment>
  </data>
  <data name="SearchText" xml:space="preserve">
    <value>検索</value>
    <comment>Search</comment>
  </data>
  <data name="StockSymbolSelectText" xml:space="preserve">
    <value>他のシンボルを選択</value>
    <comment>Select one or more symbols</comment>
  </data>
  <data name="GroupByDepartmentText" xml:space="preserve">
    <value>部署でグループ化</value>
    <comment>Group by department</comment>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>ネイティブの FlexGrid for Blazor コントロールを使用すると、表形式および階層形式のデータを表示、選択、編集、並べ替え、グループ化、フィルタリングできます。セルの編集と外観に優れた柔軟性とカスタマイズを提供します。 さらに、大規模なデータセットのスマートなオンデマンドロード、レスポンシブなサイズ設定、セルのフリーズやマージなどの Microsoft Excel のようなスプレッドシート機能をサポートしています。</value>
    <comment>The native FlexGrid for Blazor control allows you to display, select, edit, sort, group and filter tabular and hierarchical data. It provides exceptional flexibility and customization for cell editing and appearance. Plus, it supports smart, on-demand loading for large data sets, responsive sizing, and many Microsoft Excel-like spreadsheet features such as cell freezing and merging.</comment>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="SelectionModesDescription" xml:space="preserve">
    <value>選択モードを設定して、セルの選択方法を管理します。FlexGrid は、単一行およびセル選択モードをサポートします（ユーザーが SHIFT キーを押した場合、行とセルの範囲に加えて）。選択したセルデータは、コントロールの Selection プロパティを通じて簡単に取得できます。</value>
    <comment>Manage how cells are selected by setting the selection mode. FlexGrid supports single row and cell selection modes, (plus row and cell ranges when the user holds the SHIFT key.) The selected cell data can then be easily retrieved through the control’s Selection property.</comment>
  </data>
  <data name="CellFreezingDescription" xml:space="preserve">
    <value>FlexGrid は、行と列の固定をサポートしており、ユーザーがスクロールしても静的なままにできます。</value>
    <comment>FlexGrid supports freezing rows and columns so that they remain static as the user scrolls.</comment>
  </data>
  <data name="CellMergingDescription" xml:space="preserve">
    <value>FlexGrid はセルの結合をサポートしています。バインドされたデータを使用する場合、行または列をまたいだデータは自動的にマージできます。データ値が同じ場合、セルを両方向にマージすることもできます。</value>
    <comment>FlexGrid supports cell merging. Data across rows or down columns can be automatically merged when working with bound data. Cells can even be merged in both directions if the data values are the same.</comment>
  </data>
  <data name="CheckListDescription" xml:space="preserve">
    <value>チェックボックスを使用して、隣接していない複数の行の選択を有効にします。 この機能は、FlexGrid の動作を使用して組み込まれています。</value>
    <comment>Enable selection of multiple, non-adjacent rows using check-boxes. This feature is built-in using a FlexGrid behavior.</comment>
  </data>
  <data name="ColumnDefinitionDescription" xml:space="preserve">
    <value>デフォルトでは、FlexGrid をデータソースにバインドすると、列が自動的に生成されます。どの列をどの順序で表示するかを完全に制御するには、列を自分で定義し、自動生成を無効にすることができます。このデモでは、マークアップで列を定義する方法と、数値と日付値をフォーマットする方法を示します。</value>
    <comment>By default, columns are automatically generated when you bind FlexGrid to a data source. For complete control over which columns are displayed, and in what order, you may define the columns yourself and disable the automatic generation. This demo shows how to define columns in markup, as well as format number and date values.</comment>
  </data>
  <data name="ConditionalFormattingDescription" xml:space="preserve">
    <value>GridCellFactory クラスは、FlexGrid でカスタムセルを作成するために使用されます。セル内のカスタム要素のサポートに加えて、セルファクトリを使用して、各セルの表示を完全に制御できます。このデモでは、セルファクトリを使用して、セルの値に基づいてセルの背景とテキストの色をカスタマイズします。</value>
    <comment>The GridCellFactory class is used to create custom cells in FlexGrid. In addition to supporting custom elements within cells, the cell factory can be used to provide complete control over the display of each cell. In this demo, a cell factory is used to customize the cell background and text colors based upon the cell values.</comment>
  </data>
  <data name="CustomAppearanceDescription" xml:space="preserve">
    <value>FlexGrid には、グリッドのすべての視覚的側面のスタイルを簡単に設定できる多くのプロパティが含まれています。これには、列ヘッダー、行ヘッダー、選択ガイド、グリッド線、選択したセル、およびセルのパディングが含まれます。</value>
    <comment>FlexGrid contains many properties that allow you to easily style all visual aspects of the grid. This includes column headers, row headers, selection adorners, gridlines, selected cells, and cell padding.</comment>
  </data>
  <data name="CustomColumnDescription" xml:space="preserve">
    <value>このデモでは、画像、数値入力、日付と時刻、折り返し付きのセルテキストなど、いくつかのカスタム列を示します。</value>
    <comment>This demo shows several custom columns including images, numeric input, date &amp; time and cell text with wrapping.</comment>
  </data>
  <data name="CustomColumnSummary" xml:space="preserve">
    <value>さまざまな種類の列をカスタマイズする方法</value>
    <comment>Shows how to customize different kinds of columns</comment>
  </data>
  <data name="CustomColumnTitle" xml:space="preserve">
    <value>カスタム列</value>
    <comment>Custom Column</comment>
  </data>
  <data name="CustomSortIconDescription" xml:space="preserve">
    <value>FlexGrid 内に表示されるデータは、列ヘッダーをクリックまたはタップすることですばやくソートできます。このデモでは、並べ替えアイコンの位置とテンプレートをカスタマイズする方法を示します。</value>
    <comment>Data displayed within FlexGrid can be quickly sorted by clicking or tapping column headers. This demo shows how to customize the sort icon position and template.</comment>
  </data>
  <data name="EditConfirmationDescription" xml:space="preserve">
    <value>このデモでは、セルへの変更をコミットする前に確認ダイアログをユーザーに表示する方法を示します。</value>
    <comment>This demo shows how to prompt the user with a confirmation dialog before committing changes to a cell.</comment>
  </data>
  <data name="FullTextFilterDescription" xml:space="preserve">
    <value>フルテキストフィルタリングは、FlexGrid をフィルタリングする最も簡単な方法です。テキストボックス（C1TextBox など）を FlexGrid のフィルター動作にバインドするだけで、グリッドのすべての列で大文字と小文字、テキストの一部、または単語全体に一致するインスタントフィルターを取得できます。ハイライトテキストの色を設定することもできます。</value>
    <comment>Full-text filtering is the simplest way to filter FlexGrid. Simply bind a text box (such as C1TextBox) to the FlexGrid’s filter behavior and get instant filtering that can match exact case, partial text or whole words across all columns of the grid. You can also set the highlight text color.</comment>
  </data>
  <data name="GroupingDescription" xml:space="preserve">
    <value>FlexGrid は、C1DataCollection を介してグループ化および集約されたデータを表示できます。グリッドの GroupHeaderFormat プロパティを使用して、グループヘッダー行に表示されるテキストをカスタマイズできます。</value>
    <comment>FlexGrid can display data that is grouped and aggregated through C1DataCollection. You can customize the text that is displayed in group header rows using the grid's GroupHeaderFormat property.</comment>
  </data>
  <data name="NewRowSummary" xml:space="preserve">
    <value>新規行の追加</value>
    <comment>Shows adding new rows.</comment>
  </data>
  <data name="OnDemandDescription" xml:space="preserve">
    <value>オンデマンドロードでは、FlexGrid はユーザーがスクロールすると項目をロードします。これは仮想モードとは異なります。グリッドは行の総数を認識しないため、より多くのデータがグリッドにロードされるとスクロールバーのサイズと位置が変化するためです。この仮想化手法は、C1DataCollection の支援によってサポートされています。</value>
    <comment>With on-demand loading, FlexGrid loads items as the user scrolls. This is different from virtual mode because the grid never knows the total number of rows, so the scroll bar size and position changes as more data is loaded into the grid. This virtualization technique is supported by the help of C1DataCollection.</comment>
  </data>
  <data name="PagingDescription" xml:space="preserve">
    <value>C1DataPager を使用してページングを有効にし、FlexGrid にバインドされたデータのさまざまなページをナビゲートします。仮想モードおよびオンデマンドロードと同様に、ページングは C1DataCollection の支援によってサポートされています。</value>
    <comment>Enable paging using the C1DataPager to navigate through different pages of data bound to FlexGrid. Like the virtual mode and on-demand loading, paging is supported by the help of C1DataCollection.</comment>
  </data>
  <data name="ResponsiveSizingDescription" xml:space="preserve">
    <value>FlexGrid はレスポンシブにサイズ変更できます。つまり、使用しているブラウザやデバイスに関係なく、列幅を自動的に調整して利用可能なスペース全体をうまく埋めることができます。これはスターサイズ設定と呼ばれ、各列を 2 *、3 * などの比例したサイズに設定できます。</value>
    <comment>FlexGrid can be responsively sized, meaning the column widths can adjust automatically to nicely fill the entire available space no matter what browser or device is being used. This is known as star-sizing, and you can configure each column to be proportionally sized such as 2*, 3*, and so on.</comment>
  </data>
  <data name="RowDetailsDescription" xml:space="preserve">
    <value>行の詳細セクションを追加すると、各行の下に折りたたまれているテンプレート内のデータをグループ化して、階層グリッドを作成できます。たとえば、行の詳細をFlexGridに追加して、各行のデータの概要のみを表示し、ユーザーが行を選択するとより多くのデータを表示できます。</value>
    <comment>Adding a row details section enables you to make a hierarchical grid by grouping some data in a template that is collapsed beneath each row. For example, you can add row details to a FlexGrid that presents only a summary of the data for each row but presents more data when the user selects a row.</comment>
  </data>
  <data name="UnboundDescription" xml:space="preserve">
    <value>バインドされたデータの表示に加えて、FlexGrid は完全にアンバウンドな状態で使用できます。任意の数の行と列を追加して、プログラムでセルにデータを入力するか、エンドユーザーにスプレッドシートのようにそれらを入力させます。</value>
    <comment>In addition to displaying bound data, FlexGrid can be used completely unbound. Add any number of rows and columns and populate the cells programmatically or let the end-user fill them in like a spreadsheet.</comment>
  </data>
  <data name="VirtualModeDescription" xml:space="preserve">
    <value>FlexGrid は、非常に大規模なデータセットのパフォーマンスを高速化するためのデータ仮想化をサポートしています。仮想モードでは、ユーザーがスクロールするとデータがページ単位で取得されます。グリッドは行の総数を知っていますが、ユーザーに表示されている行のみをロードして表示します。 この仮想化手法は、C1DataCollection の支援によってサポートされています。</value>
    <comment>FlexGrid supports data virtualization for faster performance for very large data sets. With virtual mode, data is fetched in pages as the user scrolls. The grid knows the total number of rows but only loads and displays those that are visible to the user. This virtualization technique is supported by the help of C1DataCollection.</comment>
  </data>
  <data name="SelectionModesLabel" xml:space="preserve">
    <value>選択モード</value>
    <comment>Selection Modes</comment>
  </data>
  <data name="ExportDescription" xml:space="preserve">
    <value>Save メソッドを使用して、グリッドに表示されているデータを CSV、テキスト、および HTML にエクスポートできます。</value>
    <comment>The Save method allows exporting the data shown in the grid to CSV, text, and HTML.</comment>
  </data>
  <data name="FilterRowSummary" xml:space="preserve">
    <value>列のフィルタ条件をフォームで指定</value>
    <comment>Filters the data by columns through GridFilterRow.</comment>
  </data>
  <data name="Address" xml:space="preserve">
    <value>住所</value>
    <comment>Address</comment>
  </data>
  <data name="Alert" xml:space="preserve">
    <value>警告！</value>
    <comment>Alert!</comment>
  </data>
  <data name="AlertText" xml:space="preserve">
    <value>編集する行を選択してください。</value>
    <comment>Please select row to edit.</comment>
  </data>
  <data name="City" xml:space="preserve">
    <value>市</value>
    <comment>City</comment>
  </data>
  <data name="EditItem" xml:space="preserve">
    <value>アイテムを編集する</value>
    <comment>Edit item</comment>
  </data>
  <data name="EditSelectedItem" xml:space="preserve">
    <value>選択したアイテムを編集する</value>
    <comment>Edit selected item</comment>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>ファーストネーム</value>
    <comment>First name</comment>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>苗字</value>
    <comment>Last name</comment>
  </data>
  <data name="PostalCode" xml:space="preserve">
    <value>郵便番号</value>
    <comment>Postal code</comment>
  </data>
  <data name="AllowResizingLabel" xml:space="preserve">
    <value>サイズ変更を許可</value>
    <comment>Allow Resizing</comment>
  </data>
  <data name="LoadingMessage" xml:space="preserve">
    <value>データの読み込み中...</value>
    <comment>Loading data...</comment>
  </data>
  <data name="ShowSort" xml:space="preserve">
    <value>並べ替えアイコンの表示</value>
    <comment>Show sort icons</comment>
  </data>
  <data name="GridColumnCustomizationDescription" xml:space="preserve">
    <value>サンプルは、FlexGrid の GridColumn をカスタマイズする方法を示します。"Country" 列は、テキストボックスエディタの代わりにドロップダウンを使用して編集されます。</value>
  <comment>The sample demos how to customize a GridColumn of FlexGrid. The "Country" column has edited using a dropdown instead of textbox editor.</comment>
  </data>
	<data name="GridColumnCustomizationTitle" xml:space="preserve">
    <value>GridColumn カスタマイズ</value>
    <comment>GridColumn customization</comment>
  </data>
</root>