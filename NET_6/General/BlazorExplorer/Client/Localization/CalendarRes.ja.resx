<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomStylesDescription" xml:space="preserve">
    <value>C1Calendar は、スロットの境界線や色など、C1Calendar のスタイルと外観のカスタマイズをサポートしています。</value>
    <comment>C1Calendar supports customising the style and appearance of the C1Calendar including slot border and color.</comment>
  </data>
  <data name="CustomStylesTitle" xml:space="preserve">
    <value>カスタムスタイル</value>
    <comment>Custom Styles</comment>
  </data>
  <data name="DisplayDateText" xml:space="preserve">
    <value>表示日付</value>
    <comment>Display Date</comment>
  </data>
  <data name="Friday" xml:space="preserve">
    <value>金曜日</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>良好</value>
  </data>
  <data name="IconTemplateDescription" xml:space="preserve">
    <value>C1Calendar は、html 構造体によるボタンアイコンのカスタマイズをサポートしています。</value>
    <comment>C1Calendar supports customising the button icon by a html struct.</comment>
  </data>
  <data name="IconTemplateTitle" xml:space="preserve">
    <value>アイコンテンプレート</value>
    <comment>Icon Template</comment>
  </data>
  <data name="Incident" xml:space="preserve">
    <value>インシデント</value>
  </data>
  <data name="IssueFound" xml:space="preserve">
    <value>問題発生</value>
  </data>
  <data name="ItemTemplateDescription" xml:space="preserve">
    <value>C1Calendar は、html 構造体によるスロット項目のカスタマイズをサポートしています。</value>
    <comment>C1Calendar supports customising of the slot item by a html struct.</comment>
  </data>
  <data name="ItemTemplateTitle" xml:space="preserve">
    <value>項目テンプレート</value>
    <comment>Item Template</comment>
  </data>
  <data name="Maintenance" xml:space="preserve">
    <value>メンテナンス</value>
  </data>
  <data name="ModelBindingDescription" xml:space="preserve">
    <value>このセクションでは、値を C1Calendar コンポーネントにバインドする方法について簡単に説明します。</value>
    <comment>This section briefly explains how to bind the value to the C1Calendar component.</comment>
  </data>
  <data name="ModelBindingTitle" xml:space="preserve">
    <value>モデル連結</value>
    <comment>Model Binding</comment>
  </data>
  <data name="Monday" xml:space="preserve">
    <value>月曜日</value>
  </data>
  <data name="MultipleMonthsTitle" xml:space="preserve">
    <value>複数の月</value>
    <comment>Multiple Months</comment>
  </data>
  <data name="MultipleMonthsTitleDescription" xml:space="preserve">
    <value>C1Calendar は、ユーザーコードで入力された MonthCount プロパティの次の月を表示します。</value>
    <comment>Calendar displays months following MonthCount Property entered by user code.</comment>
  </data>
  <data name="OverviewDescription" xml:space="preserve">
    <value>この例は、ユーザーがシングルクリックで日付を選択できるようにするカレンダーコントロールを示します。</value>
    <comment>The example shows a C1Calendar control that allows users to select the date with a single click.</comment>
  </data>
  <data name="OverviewSummary" xml:space="preserve">
    <value>C1Calendar コントロールは1か月のカレンダーを表示し、ユーザーが日付を選択できるようにします。</value>
    <comment>The C1Calendar control displays a one-month calendar and allows users to select a date.</comment>
  </data>
  <data name="OverviewTitle" xml:space="preserve">
    <value>概要</value>
    <comment>Overview</comment>
  </data>
  <data name="Saturday" xml:space="preserve">
    <value>土曜日</value>
  </data>
  <data name="SelectedDateText" xml:space="preserve">
    <value>選択日付</value>
    <comment>Selected Date</comment>
  </data>
  <data name="Sunday" xml:space="preserve">
    <value>日曜日</value>
  </data>
  <data name="Thursday" xml:space="preserve">
    <value>木曜日</value>
  </data>
  <data name="Tuesday" xml:space="preserve">
    <value>火曜日</value>
  </data>
  <data name="UsingRangesDescription" xml:space="preserve">
    <value>C1Calendar コントロールは、ユーザーが min プロパティと max プロパティによって決定される範囲外の値を選択するのを防ぐことができます。</value>
    <comment>C1Calendar control can prevent users from selecting values outside of a range determined by the min and max properties.</comment>
  </data>
  <data name="UsingRangesTitle" xml:space="preserve">
    <value>範囲の使用</value>
    <comment>Using Ranges</comment>
  </data>
  <data name="ValidationDescription" xml:space="preserve">
    <value>このサンプルは、item-validator 属性を関数に設定して、日付が選択に有効かどうかを判断する方法を示します。</value>
    <comment>This sample shows how to set item-validator attribute to a function to determine whether dates are valid for selection.</comment>
  </data>
  <data name="ValidationHeader" xml:space="preserve">
    <value>このカレンダーコントロールを使用して、日付を選択します。 週末を選択できないことにご注意ください。</value>
    <comment>Use this Calendar control to select a date. Notice you won't be able to select weekends.</comment>
  </data>
  <data name="ValidationTitle" xml:space="preserve">
    <value>検証</value>
    <comment>Validation</comment>
  </data>
  <data name="Wednesday" xml:space="preserve">
    <value>水曜日</value>
  </data>
  <data name="CustomSlotsDescription" xml:space="preserve">
    <value>アダプタ全体で &lt;mark code&gt;C1Calendar&lt;/mark&gt; をカスタマイズする方法を示します。</value>
    <comment>Shows how to customize &lt;mark code&gt;C1Calendar&lt;/mark&gt; throughout the Adapter.</comment>
  </data>
  <data name="CustomSlotsTitle" xml:space="preserve">
    <value>カスタムスロット</value>
    <comment>Custom Slots</comment>
  </data>
</root>